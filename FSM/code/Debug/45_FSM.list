
45_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000678  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800080c  0800080c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800080c  0800080c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800080c  0800080c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800080c  0800080c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800080c  0800080c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08000820  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000038  08000820  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001958  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000066c  00000000  00000000  00021994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00022000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00022158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000386  00000000  00000000  00022248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a33  00000000  00000000  000225ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00035ef8  00000000  00000000  00024001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00059ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000324  00000000  00000000  00059f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007f4 	.word	0x080007f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080007f4 	.word	0x080007f4

080001d4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f003 021f 	and.w	r2, r3, #31
 80001e4:	4907      	ldr	r1, [pc, #28]	; (8000204 <NVIC_EnableIRQ+0x30>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	095b      	lsrs	r3, r3, #5
 80001ec:	2001      	movs	r0, #1
 80001ee:	fa00 f202 	lsl.w	r2, r0, r2
 80001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100

08000208 <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <StartTimer+0x48>)
 800020e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000210:	4a0f      	ldr	r2, [pc, #60]	; (8000250 <StartTimer+0x48>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000220:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	2264      	movs	r2, #100	; 0x64
 8000228:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 800022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022e:	2200      	movs	r2, #0
 8000230:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	b29b      	uxth	r3, r3
 8000244:	8013      	strh	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40023800 	.word	0x40023800

08000254 <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 8000258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025c:	899b      	ldrh	r3, [r3, #12]
 800025e:	b29b      	uxth	r3, r3
 8000260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	b29b      	uxth	r3, r3
 800026a:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 800026c:	201c      	movs	r0, #28
 800026e:	f7ff ffb1 	bl	80001d4 <NVIC_EnableIRQ>

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}

08000276 <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	Poll();
 800027a:	f000 f955 	bl	8000528 <Poll>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <Time_ManageDataRead>:
	ReadDataLength = n;
	Time_IsReadRequested = (unsigned char)1;
}

void Time_ManageDataRead(void)
{	
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	switch(currentState)
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <Time_ManageDataRead+0x54>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b02      	cmp	r3, #2
 800028e:	d01c      	beq.n	80002ca <Time_ManageDataRead+0x46>
 8000290:	2b02      	cmp	r3, #2
 8000292:	dc1f      	bgt.n	80002d4 <Time_ManageDataRead+0x50>
 8000294:	2b00      	cmp	r3, #0
 8000296:	d002      	beq.n	800029e <Time_ManageDataRead+0x1a>
 8000298:	2b01      	cmp	r3, #1
 800029a:	d008      	beq.n	80002ae <Time_ManageDataRead+0x2a>
		break;

		default:{}
	}
	
}
 800029c:	e01a      	b.n	80002d4 <Time_ManageDataRead+0x50>
			if(Time_IsReadRequested)
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <Time_ManageDataRead+0x58>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d015      	beq.n	80002d2 <Time_ManageDataRead+0x4e>
				currentState = READ_STATE;
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <Time_ManageDataRead+0x54>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
		break;
 80002ac:	e011      	b.n	80002d2 <Time_ManageDataRead+0x4e>
			I2C1_READ(sAddres,ReadStartAddress,Time_DataReadBuffer,ReadDataLength);
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <Time_ManageDataRead+0x5c>)
 80002b0:	7818      	ldrb	r0, [r3, #0]
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <Time_ManageDataRead+0x60>)
 80002b4:	7819      	ldrb	r1, [r3, #0]
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <Time_ManageDataRead+0x64>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <Time_ManageDataRead+0x68>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	f000 f89d 	bl	80003fc <I2C1_READ>
			currentState = READ_DONE_STATE;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <Time_ManageDataRead+0x54>)
 80002c4:	2202      	movs	r2, #2
 80002c6:	701a      	strb	r2, [r3, #0]
		break;
 80002c8:	e004      	b.n	80002d4 <Time_ManageDataRead+0x50>
			currentState = IDLE_STATE;
 80002ca:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <Time_ManageDataRead+0x54>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
		break;
 80002d0:	e000      	b.n	80002d4 <Time_ManageDataRead+0x50>
		break;
 80002d2:	bf00      	nop
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000036 	.word	0x20000036
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000035 	.word	0x20000035
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000034 	.word	0x20000034

080002f0 <I2C1_INIt>:
#include "stm32f4xx.h"
#include "i2c.h"

void I2C1_INIt(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	// Enable clock GPIOB
	RCC->AHB1ENR |=1;
 80002f4:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <I2C1_INIt+0x100>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <I2C1_INIt+0x100>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
	//set PB8 , PB9 to alternate mode
	GPIOB->MODER &=~(1U<<16);
 8000300:	4b3c      	ldr	r3, [pc, #240]	; (80003f4 <I2C1_INIt+0x104>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a3b      	ldr	r2, [pc, #236]	; (80003f4 <I2C1_INIt+0x104>)
 8000306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800030a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 800030c:	4b39      	ldr	r3, [pc, #228]	; (80003f4 <I2C1_INIt+0x104>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a38      	ldr	r2, [pc, #224]	; (80003f4 <I2C1_INIt+0x104>)
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<18);
 8000318:	4b36      	ldr	r3, [pc, #216]	; (80003f4 <I2C1_INIt+0x104>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a35      	ldr	r2, [pc, #212]	; (80003f4 <I2C1_INIt+0x104>)
 800031e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000322:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8000324:	4b33      	ldr	r3, [pc, #204]	; (80003f4 <I2C1_INIt+0x104>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a32      	ldr	r2, [pc, #200]	; (80003f4 <I2C1_INIt+0x104>)
 800032a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800032e:	6013      	str	r3, [r2, #0]
	// set alternate function
	GPIOB->AFR[1] &=~(0xffu);
 8000330:	4b30      	ldr	r3, [pc, #192]	; (80003f4 <I2C1_INIt+0x104>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <I2C1_INIt+0x104>)
 8000336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800033a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (0x44u);
 800033c:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <I2C1_INIt+0x104>)
 800033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000340:	4a2c      	ldr	r2, [pc, #176]	; (80003f4 <I2C1_INIt+0x104>)
 8000342:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000346:	6253      	str	r3, [r2, #36]	; 0x24
	//Set PB8 ,PB9 to open drain
	GPIOB->OTYPER |= (1U<<8);
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <I2C1_INIt+0x104>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	4a29      	ldr	r2, [pc, #164]	; (80003f4 <I2C1_INIt+0x104>)
 800034e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000352:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <I2C1_INIt+0x104>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <I2C1_INIt+0x104>)
 800035a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800035e:	6053      	str	r3, [r2, #4]
	//Set pull up
	GPIOB->PUPDR |= (1U<<16);
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <I2C1_INIt+0x104>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <I2C1_INIt+0x104>)
 8000366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<17);
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <I2C1_INIt+0x104>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a20      	ldr	r2, [pc, #128]	; (80003f4 <I2C1_INIt+0x104>)
 8000372:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000376:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<18);
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <I2C1_INIt+0x104>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <I2C1_INIt+0x104>)
 800037e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000382:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<19);
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <I2C1_INIt+0x104>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <I2C1_INIt+0x104>)
 800038a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800038e:	60d3      	str	r3, [r2, #12]
	//Enable clock I2C1
	RCC->APB1ENR |= (1U<<21);
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <I2C1_INIt+0x100>)
 8000392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000394:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <I2C1_INIt+0x100>)
 8000396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800039a:	6413      	str	r3, [r2, #64]	; 0x40
	// set and reset reset mode (for reinitialization)
	I2C1->CR1 |= (1U<<15);
 800039c:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <I2C1_INIt+0x108>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	4a15      	ldr	r2, [pc, #84]	; (80003f8 <I2C1_INIt+0x108>)
 80003a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80003a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	8013      	strh	r3, [r2, #0]
	I2C1->CR1 |=~(1U<<15);
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <I2C1_INIt+0x108>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <I2C1_INIt+0x108>)
 80003b8:	ea6f 33d3 	mvn.w	r3, r3, lsr #15
 80003bc:	ea6f 33c3 	mvn.w	r3, r3, lsl #15
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	8013      	strh	r3, [r2, #0]
	//SET The peripheral input clock
	I2C1->CR2 = (1U<<3); //8 Mhz
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <I2C1_INIt+0x108>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	809a      	strh	r2, [r3, #4]
	// Set I2C to standard mode
	I2C1->CCR = 80;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <I2C1_INIt+0x108>)
 80003cc:	2250      	movs	r2, #80	; 0x50
 80003ce:	839a      	strh	r2, [r3, #28]
	// SET RISE TIME
	I2C1->TRISE = 17;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <I2C1_INIt+0x108>)
 80003d2:	2211      	movs	r2, #17
 80003d4:	841a      	strh	r2, [r3, #32]
	// ENABLE I2C1
	I2C1->CR1|=(1U<<0);
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <I2C1_INIt+0x108>)
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	b29b      	uxth	r3, r3
 80003dc:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <I2C1_INIt+0x108>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	8013      	strh	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020400 	.word	0x40020400
 80003f8:	40005400 	.word	0x40005400

080003fc <I2C1_READ>:

void I2C1_READ(char slaveAddres,char memoryAddress,char data[],int n)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b087      	sub	sp, #28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60ba      	str	r2, [r7, #8]
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	4603      	mov	r3, r0
 8000408:	73fb      	strb	r3, [r7, #15]
 800040a:	460b      	mov	r3, r1
 800040c:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	// CHECK IF THE BUS IS BUSY
	while(I2C1->SR2 &(1U<<1)){}
 800040e:	bf00      	nop
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <I2C1_READ+0x128>)
 8000412:	8b1b      	ldrh	r3, [r3, #24]
 8000414:	b29b      	uxth	r3, r3
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f8      	bne.n	8000410 <I2C1_READ+0x14>



	// Generate start
	I2C1->CR1 |= (1U<<8);
 800041e:	4b41      	ldr	r3, [pc, #260]	; (8000524 <I2C1_READ+0x128>)
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	b29b      	uxth	r3, r3
 8000424:	4a3f      	ldr	r2, [pc, #252]	; (8000524 <I2C1_READ+0x128>)
 8000426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042a:	b29b      	uxth	r3, r3
 800042c:	8013      	strh	r3, [r2, #0]
	// WAIT UNTIL START FLAG IS SET
	while(!(I2C1->SR1 &(1U<<0))){}
 800042e:	bf00      	nop
 8000430:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <I2C1_READ+0x128>)
 8000432:	8a9b      	ldrh	r3, [r3, #20]
 8000434:	b29b      	uxth	r3, r3
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f8      	beq.n	8000430 <I2C1_READ+0x34>



	// Transmit slave address + WRITE
	I2C1->DR = slaveAddres<<1;
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	b29b      	uxth	r3, r3
 8000442:	4a38      	ldr	r2, [pc, #224]	; (8000524 <I2C1_READ+0x128>)
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	b29b      	uxth	r3, r3
 8000448:	8213      	strh	r3, [r2, #16]
	// WAIT UNTIL ADDRESS FLAG IS SET
	while(!(I2C1->SR1 &(1U<<1))){}
 800044a:	bf00      	nop
 800044c:	4b35      	ldr	r3, [pc, #212]	; (8000524 <I2C1_READ+0x128>)
 800044e:	8a9b      	ldrh	r3, [r3, #20]
 8000450:	b29b      	uxth	r3, r3
 8000452:	f003 0302 	and.w	r3, r3, #2
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f8      	beq.n	800044c <I2C1_READ+0x50>
	// CLEAR THE ADDRESS FLAG
	tmp = I2C1->SR2;
 800045a:	4b32      	ldr	r3, [pc, #200]	; (8000524 <I2C1_READ+0x128>)
 800045c:	8b1b      	ldrh	r3, [r3, #24]
 800045e:	b29b      	uxth	r3, r3
 8000460:	613b      	str	r3, [r7, #16]


	// TRANSMITT MEMORY ADDRESS
	I2C1->DR = memoryAddress;
 8000462:	4b30      	ldr	r3, [pc, #192]	; (8000524 <I2C1_READ+0x128>)
 8000464:	7bba      	ldrb	r2, [r7, #14]
 8000466:	b292      	uxth	r2, r2
 8000468:	821a      	strh	r2, [r3, #16]
	// WAIT UNTIL DATA REGISTER IS EMPTY
	while(!(I2C1->SR1 & (1U<<7))){}
 800046a:	bf00      	nop
 800046c:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <I2C1_READ+0x128>)
 800046e:	8a9b      	ldrh	r3, [r3, #20]
 8000470:	b29b      	uxth	r3, r3
 8000472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <I2C1_READ+0x70>


	//RESTART
	// Generate start
	I2C1->CR1 |= (1U<<8);
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <I2C1_READ+0x128>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	b29b      	uxth	r3, r3
 8000480:	4a28      	ldr	r2, [pc, #160]	; (8000524 <I2C1_READ+0x128>)
 8000482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000486:	b29b      	uxth	r3, r3
 8000488:	8013      	strh	r3, [r2, #0]
	// WAIT UNTIL START FLAG IS SET
	while(!(I2C1->SR1 &(1U<<0))){}
 800048a:	bf00      	nop
 800048c:	4b25      	ldr	r3, [pc, #148]	; (8000524 <I2C1_READ+0x128>)
 800048e:	8a9b      	ldrh	r3, [r3, #20]
 8000490:	b29b      	uxth	r3, r3
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f8      	beq.n	800048c <I2C1_READ+0x90>


	// Transmit slave address + READ
	I2C1->DR = slaveAddres<<1|(1U<<0);
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	b29b      	uxth	r3, r3
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	4a20      	ldr	r2, [pc, #128]	; (8000524 <I2C1_READ+0x128>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	8213      	strh	r3, [r2, #16]
	// WAIT UNTIL ADDRESS FLAG IS SET
	while(!(I2C1->SR1 &(1U<<1))){}
 80004ac:	bf00      	nop
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <I2C1_READ+0x128>)
 80004b0:	8a9b      	ldrh	r3, [r3, #20]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f8      	beq.n	80004ae <I2C1_READ+0xb2>
	// CLEAR THE ADDRESS FLAG
	tmp = I2C1->SR2;
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <I2C1_READ+0x128>)
 80004be:	8b1b      	ldrh	r3, [r3, #24]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	613b      	str	r3, [r7, #16]

	//RECIEVE DATA
	for(int i =0 ; i<n;i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	e012      	b.n	80004f0 <I2C1_READ+0xf4>
	{
		while(!(I2C1->SR1 & (1<<6))){}
 80004ca:	bf00      	nop
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <I2C1_READ+0x128>)
 80004ce:	8a9b      	ldrh	r3, [r3, #20]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f8      	beq.n	80004cc <I2C1_READ+0xd0>
		data[i] = (char)I2C1->DR;
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <I2C1_READ+0x128>)
 80004dc:	8a1b      	ldrh	r3, [r3, #16]
 80004de:	b299      	uxth	r1, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4413      	add	r3, r2
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i<n;i++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbe8      	blt.n	80004ca <I2C1_READ+0xce>
	}


	// stop
	// CLear ACK
	I2C1->CR1 &=~(1U<<10);
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <I2C1_READ+0x128>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <I2C1_READ+0x128>)
 8000500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000504:	b29b      	uxth	r3, r3
 8000506:	8013      	strh	r3, [r2, #0]
	// Generate stop
	I2C1->CR1 |=(1U<<9);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <I2C1_READ+0x128>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	b29b      	uxth	r3, r3
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <I2C1_READ+0x128>)
 8000510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000514:	b29b      	uxth	r3, r3
 8000516:	8013      	strh	r3, [r2, #0]

}
 8000518:	bf00      	nop
 800051a:	371c      	adds	r7, #28
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40005400 	.word	0x40005400

08000528 <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	if(polling_enabled && (!counter))
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <Poll+0x3c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <Poll+0x18>
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <Poll+0x40>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <Poll+0x18>
	{
		Time_ManageDataRead();
 800053c:	f7ff fea2 	bl	8000284 <Time_ManageDataRead>
	}
	counter++;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <Poll+0x40>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <Poll+0x40>)
 8000548:	6013      	str	r3, [r2, #0]
	counter = counter%polling_counter;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <Poll+0x40>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <Poll+0x44>)
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	fb93 f1f2 	sdiv	r1, r3, r2
 8000556:	fb02 f201 	mul.w	r2, r2, r1
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4a02      	ldr	r2, [pc, #8]	; (8000568 <Poll+0x40>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000008 	.word	0x20000008

08000570 <StartPolling>:

void StartPolling(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	polling_enabled=1;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <StartPolling+0x14>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20000004 	.word	0x20000004

08000588 <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	polling_counter = polling_time/100;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <SetPollingTime+0x28>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	1152      	asrs	r2, r2, #5
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <SetPollingTime+0x2c>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	51eb851f 	.word	0x51eb851f
 80005b4:	20000008 	.word	0x20000008

080005b8 <main>:
#include "i2c.h"
#include "ds1307.h"


int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	StartTimer();
 80005bc:	f7ff fe24 	bl	8000208 <StartTimer>
	EnableInterrupt();
 80005c0:	f7ff fe48 	bl	8000254 <EnableInterrupt>
	SetPollingTime(500);
 80005c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c8:	f7ff ffde 	bl	8000588 <SetPollingTime>
	StartPolling();
 80005cc:	f7ff ffd0 	bl	8000570 <StartPolling>
	// Initialize I2C1
	I2C1_INIt();
 80005d0:	f7ff fe8e 	bl	80002f0 <I2C1_INIt>

	while(1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x1c>

080005d6 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 80005da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005de:	8a1b      	ldrh	r3, [r3, #16]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e6:	f023 0301 	bic.w	r3, r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 80005ee:	f7ff fe42 	bl	8000276 <CallPollingFunction>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <SystemInit+0x60>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <SystemInit+0x60>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <SystemInit+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <SystemInit+0x64>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <SystemInit+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <SystemInit+0x64>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <SystemInit+0x64>)
 8000624:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <SystemInit+0x64>)
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <SystemInit+0x68>)
 8000632:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <SystemInit+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a08      	ldr	r2, [pc, #32]	; (800065c <SystemInit+0x64>)
 800063a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800063e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SystemInit+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000646:	f000 f80d 	bl	8000664 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <SystemInit+0x60>)
 800064c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000650:	609a      	str	r2, [r3, #8]
#endif
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	40023800 	.word	0x40023800
 8000660:	24003010 	.word	0x24003010

08000664 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <SetSysClock+0xe4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a34      	ldr	r2, [pc, #208]	; (8000748 <SetSysClock+0xe4>)
 8000678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <SetSysClock+0xe4>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <SetSysClock+0x38>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800069a:	d1f0      	bne.n	800067e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800069c:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <SetSysClock+0xe4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006a8:	2301      	movs	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	e001      	b.n	80006b2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d140      	bne.n	800073a <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SetSysClock+0xe4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <SetSysClock+0xe4>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <SetSysClock+0xe8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <SetSysClock+0xe8>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ce:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SetSysClock+0xe4>)
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <SetSysClock+0xe4>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <SetSysClock+0xe4>)
 80006da:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <SetSysClock+0xe4>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SetSysClock+0xe4>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <SetSysClock+0xe4>)
 80006e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ea:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <SetSysClock+0xe4>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <SetSysClock+0xec>)
 80006f0:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <SetSysClock+0xe4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <SetSysClock+0xe4>)
 80006f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006fe:	bf00      	nop
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <SetSysClock+0xe4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f9      	beq.n	8000700 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <SetSysClock+0xf0>)
 800070e:	f240 7202 	movw	r2, #1794	; 0x702
 8000712:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <SetSysClock+0xe4>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <SetSysClock+0xe4>)
 800071a:	f023 0303 	bic.w	r3, r3, #3
 800071e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <SetSysClock+0xe4>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <SetSysClock+0xe4>)
 8000726:	f043 0302 	orr.w	r3, r3, #2
 800072a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800072c:	bf00      	nop
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SetSysClock+0xe4>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d1f9      	bne.n	800072e <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000
 8000750:	07415419 	.word	0x07415419
 8000754:	40023c00 	.word	0x40023c00

08000758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0b      	ldr	r4, [pc, #44]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000782:	f7ff ff39 	bl	80005f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000786:	f000 f811 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff ff15 	bl	80005b8 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800079c:	08000814 	.word	0x08000814
  ldr r2, =_sbss
 80007a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a4:	20000038 	.word	0x20000038

080007a8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC_IRQHandler>
	...

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	; (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	; (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	; (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 f818 	bl	80007f4 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	0800080c 	.word	0x0800080c
 80007e8:	0800080c 	.word	0x0800080c
 80007ec:	0800080c 	.word	0x0800080c
 80007f0:	08000810 	.word	0x08000810

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
