
decimal counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001c2a  00001cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000651  0080007e  0080007e  00001cdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047ad  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9b  00000000  00000000  00006885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b94  00000000  00000000  00007720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  0000a2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017b2  00000000  00000000  0000ae54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b00  00000000  00000000  0000c606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00011106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3c       	cpi	r26, 0xCF	; 207
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <main>
      8a:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      92:	fc 01       	movw	r30, r24
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      bc:	48 81       	ld	r20, Y
      be:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
      c0:	4f 3f       	cpi	r20, 0xFF	; 255
      c2:	2f ef       	ldi	r18, 0xFF	; 255
      c4:	52 07       	cpc	r21, r18
      c6:	21 f4       	brne	.+8      	; 0xd0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
      c8:	fc 01       	movw	r30, r24
      ca:	a7 81       	ldd	r26, Z+7	; 0x07
      cc:	b0 85       	ldd	r27, Z+8	; 0x08
      ce:	0d c0       	rjmp	.+26     	; 0xea <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
      d0:	dc 01       	movw	r26, r24
      d2:	13 96       	adiw	r26, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <vListInsert+0x22>
      d6:	df 01       	movw	r26, r30
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	ed 91       	ld	r30, X+
      dc:	fc 91       	ld	r31, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	20 81       	ld	r18, Z
      e2:	31 81       	ldd	r19, Z+1	; 0x01
      e4:	42 17       	cp	r20, r18
      e6:	53 07       	cpc	r21, r19
      e8:	b0 f7       	brcc	.-20     	; 0xd6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
      ea:	12 96       	adiw	r26, 0x02	; 2
      ec:	ed 91       	ld	r30, X+
      ee:	fc 91       	ld	r31, X
      f0:	13 97       	sbiw	r26, 0x03	; 3
      f2:	fb 83       	std	Y+3, r31	; 0x03
      f4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
      f6:	d5 83       	std	Z+5, r29	; 0x05
      f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
      fa:	bd 83       	std	Y+5, r27	; 0x05
      fc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
      fe:	13 96       	adiw	r26, 0x03	; 3
     100:	dc 93       	st	X, r29
     102:	ce 93       	st	-X, r28
     104:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     106:	99 87       	std	Y+9, r25	; 0x09
     108:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     10a:	fc 01       	movw	r30, r24
     10c:	20 81       	ld	r18, Z
     10e:	2f 5f       	subi	r18, 0xFF	; 255
     110:	20 83       	st	Z, r18
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     11e:	a0 85       	ldd	r26, Z+8	; 0x08
     120:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     122:	c2 81       	ldd	r28, Z+2	; 0x02
     124:	d3 81       	ldd	r29, Z+3	; 0x03
     126:	84 81       	ldd	r24, Z+4	; 0x04
     128:	95 81       	ldd	r25, Z+5	; 0x05
     12a:	9d 83       	std	Y+5, r25	; 0x05
     12c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     12e:	c4 81       	ldd	r28, Z+4	; 0x04
     130:	d5 81       	ldd	r29, Z+5	; 0x05
     132:	82 81       	ldd	r24, Z+2	; 0x02
     134:	93 81       	ldd	r25, Z+3	; 0x03
     136:	9b 83       	std	Y+3, r25	; 0x03
     138:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     13a:	11 96       	adiw	r26, 0x01	; 1
     13c:	8d 91       	ld	r24, X+
     13e:	9c 91       	ld	r25, X
     140:	12 97       	sbiw	r26, 0x02	; 2
     142:	e8 17       	cp	r30, r24
     144:	f9 07       	cpc	r31, r25
     146:	31 f4       	brne	.+12     	; 0x154 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     148:	84 81       	ldd	r24, Z+4	; 0x04
     14a:	95 81       	ldd	r25, Z+5	; 0x05
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	9c 93       	st	X, r25
     150:	8e 93       	st	-X, r24
     152:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     154:	11 86       	std	Z+9, r1	; 0x09
     156:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     158:	8c 91       	ld	r24, X
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     15e:	8c 91       	ld	r24, X
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     166:	1b bc       	out	0x2b, r1	; 43
     168:	8c e7       	ldi	r24, 0x7C	; 124
     16a:	8a bd       	out	0x2a, r24	; 42
     16c:	8b e0       	ldi	r24, 0x0B	; 11
     16e:	8e bd       	out	0x2e, r24	; 46
     170:	89 b7       	in	r24, 0x39	; 57
     172:	80 61       	ori	r24, 0x10	; 16
     174:	89 bf       	out	0x39, r24	; 57
     176:	08 95       	ret

00000178 <pxPortInitialiseStack>:
     178:	31 e1       	ldi	r19, 0x11	; 17
     17a:	fc 01       	movw	r30, r24
     17c:	30 83       	st	Z, r19
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	22 e2       	ldi	r18, 0x22	; 34
     182:	20 83       	st	Z, r18
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	a3 e3       	ldi	r26, 0x33	; 51
     188:	a0 83       	st	Z, r26
     18a:	31 97       	sbiw	r30, 0x01	; 1
     18c:	60 83       	st	Z, r22
     18e:	31 97       	sbiw	r30, 0x01	; 1
     190:	70 83       	st	Z, r23
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	10 82       	st	Z, r1
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	60 e8       	ldi	r22, 0x80	; 128
     19a:	60 83       	st	Z, r22
     19c:	31 97       	sbiw	r30, 0x01	; 1
     19e:	10 82       	st	Z, r1
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	62 e0       	ldi	r22, 0x02	; 2
     1a4:	60 83       	st	Z, r22
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	63 e0       	ldi	r22, 0x03	; 3
     1aa:	60 83       	st	Z, r22
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	64 e0       	ldi	r22, 0x04	; 4
     1b0:	60 83       	st	Z, r22
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	65 e0       	ldi	r22, 0x05	; 5
     1b6:	60 83       	st	Z, r22
     1b8:	31 97       	sbiw	r30, 0x01	; 1
     1ba:	66 e0       	ldi	r22, 0x06	; 6
     1bc:	60 83       	st	Z, r22
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	67 e0       	ldi	r22, 0x07	; 7
     1c2:	60 83       	st	Z, r22
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	68 e0       	ldi	r22, 0x08	; 8
     1c8:	60 83       	st	Z, r22
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	69 e0       	ldi	r22, 0x09	; 9
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	60 e1       	ldi	r22, 0x10	; 16
     1d4:	60 83       	st	Z, r22
     1d6:	31 97       	sbiw	r30, 0x01	; 1
     1d8:	30 83       	st	Z, r19
     1da:	31 97       	sbiw	r30, 0x01	; 1
     1dc:	32 e1       	ldi	r19, 0x12	; 18
     1de:	30 83       	st	Z, r19
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	33 e1       	ldi	r19, 0x13	; 19
     1e4:	30 83       	st	Z, r19
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	34 e1       	ldi	r19, 0x14	; 20
     1ea:	30 83       	st	Z, r19
     1ec:	31 97       	sbiw	r30, 0x01	; 1
     1ee:	35 e1       	ldi	r19, 0x15	; 21
     1f0:	30 83       	st	Z, r19
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	36 e1       	ldi	r19, 0x16	; 22
     1f6:	30 83       	st	Z, r19
     1f8:	31 97       	sbiw	r30, 0x01	; 1
     1fa:	37 e1       	ldi	r19, 0x17	; 23
     1fc:	30 83       	st	Z, r19
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	38 e1       	ldi	r19, 0x18	; 24
     202:	30 83       	st	Z, r19
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	39 e1       	ldi	r19, 0x19	; 25
     208:	30 83       	st	Z, r19
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	30 e2       	ldi	r19, 0x20	; 32
     20e:	30 83       	st	Z, r19
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	31 e2       	ldi	r19, 0x21	; 33
     214:	30 83       	st	Z, r19
     216:	31 97       	sbiw	r30, 0x01	; 1
     218:	20 83       	st	Z, r18
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	23 e2       	ldi	r18, 0x23	; 35
     21e:	20 83       	st	Z, r18
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	40 83       	st	Z, r20
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	50 83       	st	Z, r21
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	26 e2       	ldi	r18, 0x26	; 38
     22c:	20 83       	st	Z, r18
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	27 e2       	ldi	r18, 0x27	; 39
     232:	20 83       	st	Z, r18
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	28 e2       	ldi	r18, 0x28	; 40
     238:	20 83       	st	Z, r18
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	29 e2       	ldi	r18, 0x29	; 41
     23e:	20 83       	st	Z, r18
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	20 e3       	ldi	r18, 0x30	; 48
     244:	20 83       	st	Z, r18
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	21 e3       	ldi	r18, 0x31	; 49
     24a:	20 83       	st	Z, r18
     24c:	86 97       	sbiw	r24, 0x26	; 38
     24e:	08 95       	ret

00000250 <xPortStartScheduler>:
     250:	0e 94 b3 00 	call	0x166	; 0x166 <prvSetupTimerInterrupt>
     254:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     258:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     25c:	cd 91       	ld	r28, X+
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	dd 91       	ld	r29, X+
     262:	de bf       	out	0x3e, r29	; 62
     264:	ff 91       	pop	r31
     266:	ef 91       	pop	r30
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	7f 91       	pop	r23
     276:	6f 91       	pop	r22
     278:	5f 91       	pop	r21
     27a:	4f 91       	pop	r20
     27c:	3f 91       	pop	r19
     27e:	2f 91       	pop	r18
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	3f 90       	pop	r3
     29e:	2f 90       	pop	r2
     2a0:	1f 90       	pop	r1
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	08 95       	ret
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	08 95       	ret

000002ae <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	0f 92       	push	r0
     2b6:	1f 92       	push	r1
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 92       	push	r2
     2bc:	3f 92       	push	r3
     2be:	4f 92       	push	r4
     2c0:	5f 92       	push	r5
     2c2:	6f 92       	push	r6
     2c4:	7f 92       	push	r7
     2c6:	8f 92       	push	r8
     2c8:	9f 92       	push	r9
     2ca:	af 92       	push	r10
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     2fa:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     2fe:	0d b6       	in	r0, 0x3d	; 61
     300:	0d 92       	st	X+, r0
     302:	0e b6       	in	r0, 0x3e	; 62
     304:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     306:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     30a:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     30e:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     312:	cd 91       	ld	r28, X+
     314:	cd bf       	out	0x3d, r28	; 61
     316:	dd 91       	ld	r29, X+
     318:	de bf       	out	0x3e, r29	; 62
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	bf 91       	pop	r27
     324:	af 91       	pop	r26
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	7f 91       	pop	r23
     32c:	6f 91       	pop	r22
     32e:	5f 91       	pop	r21
     330:	4f 91       	pop	r20
     332:	3f 91       	pop	r19
     334:	2f 91       	pop	r18
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	9f 90       	pop	r9
     348:	8f 90       	pop	r8
     34a:	7f 90       	pop	r7
     34c:	6f 90       	pop	r6
     34e:	5f 90       	pop	r5
     350:	4f 90       	pop	r4
     352:	3f 90       	pop	r3
     354:	2f 90       	pop	r2
     356:	1f 90       	pop	r1
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     35e:	08 95       	ret

00000360 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	0f 92       	push	r0
     368:	1f 92       	push	r1
     36a:	11 24       	eor	r1, r1
     36c:	2f 92       	push	r2
     36e:	3f 92       	push	r3
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
     3a8:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     3ac:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     3b0:	0d b6       	in	r0, 0x3d	; 61
     3b2:	0d 92       	st	X+, r0
     3b4:	0e b6       	in	r0, 0x3e	; 62
     3b6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     3b8:	0e 94 6d 08 	call	0x10da	; 0x10da <xTaskIncrementTick>
     3bc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     3be:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     3c2:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     3c6:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     3ca:	cd 91       	ld	r28, X+
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	dd 91       	ld	r29, X+
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	1f 90       	pop	r1
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0

	asm volatile ( "ret" );
     416:	08 95       	ret

00000418 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     418:	0e 94 b0 01 	call	0x360	; 0x360 <vPortYieldFromTick>
		asm volatile ( "reti" );
     41c:	18 95       	reti

0000041e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     41e:	ea e8       	ldi	r30, 0x8A	; 138
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	ae e8       	ldi	r26, 0x8E	; 142
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	b1 83       	std	Z+1, r27	; 0x01
     428:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     42e:	e6 e6       	ldi	r30, 0x66	; 102
     430:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     432:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <pxEnd+0x1>
     436:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <pxEnd>
    pxEnd->xBlockSize = 0;
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     442:	88 ed       	ldi	r24, 0xD8	; 216
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	13 96       	adiw	r26, 0x03	; 3
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
     44c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     44e:	ed 93       	st	X+, r30
     450:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     452:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <xMinimumEverFreeBytesRemaining+0x1>
     456:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     45a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <xFreeBytesRemaining+0x1>
     45e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e8       	ldi	r25, 0x80	; 128
     466:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x1>
     46a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
     46e:	08 95       	ret

00000470 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     476:	aa e8       	ldi	r26, 0x8A	; 138
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	01 c0       	rjmp	.+2      	; 0x47e <prvInsertBlockIntoFreeList+0xe>
     47c:	df 01       	movw	r26, r30
     47e:	ed 91       	ld	r30, X+
     480:	fc 91       	ld	r31, X
     482:	11 97       	sbiw	r26, 0x01	; 1
     484:	ec 17       	cp	r30, r28
     486:	fd 07       	cpc	r31, r29
     488:	c8 f3       	brcs	.-14     	; 0x47c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	13 97       	sbiw	r26, 0x03	; 3
     492:	9d 01       	movw	r18, r26
     494:	28 0f       	add	r18, r24
     496:	39 1f       	adc	r19, r25
     498:	c2 17       	cp	r28, r18
     49a:	d3 07       	cpc	r29, r19
     49c:	49 f4       	brne	.+18     	; 0x4b0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     49e:	2a 81       	ldd	r18, Y+2	; 0x02
     4a0:	3b 81       	ldd	r19, Y+3	; 0x03
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
     4a6:	13 96       	adiw	r26, 0x03	; 3
     4a8:	9c 93       	st	X, r25
     4aa:	8e 93       	st	-X, r24
     4ac:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     4ae:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	9b 81       	ldd	r25, Y+3	; 0x03
     4b4:	9e 01       	movw	r18, r28
     4b6:	28 0f       	add	r18, r24
     4b8:	39 1f       	adc	r19, r25
     4ba:	e2 17       	cp	r30, r18
     4bc:	f3 07       	cpc	r31, r19
     4be:	c1 f4       	brne	.+48     	; 0x4f0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     4c0:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <pxEnd>
     4c4:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <pxEnd+0x1>
     4c8:	e2 17       	cp	r30, r18
     4ca:	f3 07       	cpc	r31, r19
     4cc:	71 f0       	breq	.+28     	; 0x4ea <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4ce:	22 81       	ldd	r18, Z+2	; 0x02
     4d0:	33 81       	ldd	r19, Z+3	; 0x03
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	9b 83       	std	Y+3, r25	; 0x03
     4d8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	99 83       	std	Y+1, r25	; 0x01
     4e6:	88 83       	st	Y, r24
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4ea:	39 83       	std	Y+1, r19	; 0x01
     4ec:	28 83       	st	Y, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4f0:	f9 83       	std	Y+1, r31	; 0x01
     4f2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4f4:	ca 17       	cp	r28, r26
     4f6:	db 07       	cpc	r29, r27
     4f8:	11 f0       	breq	.+4      	; 0x4fe <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4fa:	cd 93       	st	X+, r28
     4fc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     512:	0e 94 67 08 	call	0x10ce	; 0x10ce <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     516:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <pxEnd>
     51a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <pxEnd+0x1>
     51e:	89 2b       	or	r24, r25
     520:	11 f4       	brne	.+4      	; 0x526 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     522:	0e 94 0f 02 	call	0x41e	; 0x41e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     526:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     52a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x1>
     52e:	80 23       	and	r24, r16
     530:	91 23       	and	r25, r17
     532:	89 2b       	or	r24, r25
     534:	09 f0       	breq	.+2      	; 0x538 <pvPortMalloc+0x34>
     536:	77 c0       	rjmp	.+238    	; 0x626 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     538:	01 15       	cp	r16, r1
     53a:	11 05       	cpc	r17, r1
     53c:	49 f0       	breq	.+18     	; 0x550 <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     53e:	c8 01       	movw	r24, r16
     540:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     542:	08 17       	cp	r16, r24
     544:	19 07       	cpc	r17, r25
     546:	18 f0       	brcs	.+6      	; 0x54e <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
     548:	00 e0       	ldi	r16, 0x00	; 0
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	01 c0       	rjmp	.+2      	; 0x550 <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     54e:	8c 01       	movw	r16, r24
            else
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     550:	01 15       	cp	r16, r1
     552:	11 05       	cpc	r17, r1
     554:	09 f4       	brne	.+2      	; 0x558 <pvPortMalloc+0x54>
     556:	6a c0       	rjmp	.+212    	; 0x62c <pvPortMalloc+0x128>
     558:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <xFreeBytesRemaining>
     55c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <xFreeBytesRemaining+0x1>
     560:	80 17       	cp	r24, r16
     562:	91 07       	cpc	r25, r17
     564:	08 f4       	brcc	.+2      	; 0x568 <pvPortMalloc+0x64>
     566:	65 c0       	rjmp	.+202    	; 0x632 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     568:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <xStart>
     56c:	d0 91 8b 00 	lds	r29, 0x008B	; 0x80008b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     570:	ea e8       	ldi	r30, 0x8A	; 138
     572:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     574:	02 c0       	rjmp	.+4      	; 0x57a <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     576:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     578:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	80 17       	cp	r24, r16
     580:	91 07       	cpc	r25, r17
     582:	20 f4       	brcc	.+8      	; 0x58c <pvPortMalloc+0x88>
     584:	88 81       	ld	r24, Y
     586:	99 81       	ldd	r25, Y+1	; 0x01
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	a9 f7       	brne	.-22     	; 0x576 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     58c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <pxEnd>
     590:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <pxEnd+0x1>
     594:	c8 17       	cp	r28, r24
     596:	d9 07       	cpc	r29, r25
     598:	09 f4       	brne	.+2      	; 0x59c <pvPortMalloc+0x98>
     59a:	4e c0       	rjmp	.+156    	; 0x638 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     59c:	e0 80       	ld	r14, Z
     59e:	f1 80       	ldd	r15, Z+1	; 0x01
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	e8 0e       	add	r14, r24
     5a4:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5a6:	88 81       	ld	r24, Y
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	3b 81       	ldd	r19, Y+3	; 0x03
     5b2:	20 1b       	sub	r18, r16
     5b4:	31 0b       	sbc	r19, r17
     5b6:	29 30       	cpi	r18, 0x09	; 9
     5b8:	31 05       	cpc	r19, r1
     5ba:	50 f0       	brcs	.+20     	; 0x5d0 <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5bc:	ce 01       	movw	r24, r28
     5be:	80 0f       	add	r24, r16
     5c0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5c2:	fc 01       	movw	r30, r24
     5c4:	33 83       	std	Z+3, r19	; 0x03
     5c6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5c8:	1b 83       	std	Y+3, r17	; 0x03
     5ca:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5cc:	0e 94 38 02 	call	0x470	; 0x470 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	3b 81       	ldd	r19, Y+3	; 0x03
     5d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <xFreeBytesRemaining>
     5d8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <xFreeBytesRemaining+0x1>
     5dc:	82 1b       	sub	r24, r18
     5de:	93 0b       	sbc	r25, r19
     5e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <xFreeBytesRemaining+0x1>
     5e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <xMinimumEverFreeBytesRemaining>
     5ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <xMinimumEverFreeBytesRemaining+0x1>
     5f0:	84 17       	cp	r24, r20
     5f2:	95 07       	cpc	r25, r21
     5f4:	20 f4       	brcc	.+8      	; 0x5fe <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5f6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <xMinimumEverFreeBytesRemaining+0x1>
     5fa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     602:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x1>
     606:	28 2b       	or	r18, r24
     608:	39 2b       	or	r19, r25
     60a:	3b 83       	std	Y+3, r19	; 0x03
     60c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     612:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xNumberOfSuccessfulAllocations>
     616:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xNumberOfSuccessfulAllocations+0x1>
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <xNumberOfSuccessfulAllocations+0x1>
     620:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xNumberOfSuccessfulAllocations>
     624:	0b c0       	rjmp	.+22     	; 0x63c <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     626:	e1 2c       	mov	r14, r1
     628:	f1 2c       	mov	r15, r1
     62a:	08 c0       	rjmp	.+16     	; 0x63c <pvPortMalloc+0x138>
     62c:	e1 2c       	mov	r14, r1
     62e:	f1 2c       	mov	r15, r1
     630:	05 c0       	rjmp	.+10     	; 0x63c <pvPortMalloc+0x138>
     632:	e1 2c       	mov	r14, r1
     634:	f1 2c       	mov	r15, r1
     636:	02 c0       	rjmp	.+4      	; 0x63c <pvPortMalloc+0x138>
     638:	e1 2c       	mov	r14, r1
     63a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     63c:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     640:	c7 01       	movw	r24, r14
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	99 f1       	breq	.+102    	; 0x6c2 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     65c:	ec 01       	movw	r28, r24
     65e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     660:	4a 81       	ldd	r20, Y+2	; 0x02
     662:	5b 81       	ldd	r21, Y+3	; 0x03
     664:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <__data_end>
     668:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <__data_end+0x1>
     66c:	ba 01       	movw	r22, r20
     66e:	62 23       	and	r22, r18
     670:	73 23       	and	r23, r19
     672:	67 2b       	or	r22, r23
     674:	31 f1       	breq	.+76     	; 0x6c2 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     676:	68 81       	ld	r22, Y
     678:	79 81       	ldd	r23, Y+1	; 0x01
     67a:	67 2b       	or	r22, r23
     67c:	11 f5       	brne	.+68     	; 0x6c2 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     67e:	20 95       	com	r18
     680:	30 95       	com	r19
     682:	24 23       	and	r18, r20
     684:	35 23       	and	r19, r21
     686:	3b 83       	std	Y+3, r19	; 0x03
     688:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     68a:	0e 94 67 08 	call	0x10ce	; 0x10ce <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	9b 81       	ldd	r25, Y+3	; 0x03
     692:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <xFreeBytesRemaining>
     696:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <xFreeBytesRemaining+0x1>
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <xFreeBytesRemaining+0x1>
     6a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 38 02 	call	0x470	; 0x470 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <xNumberOfSuccessfulFrees>
     6b0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <xNumberOfSuccessfulFrees+0x1>
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <xNumberOfSuccessfulFrees+0x1>
     6ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6be:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     6cc:	dc 01       	movw	r26, r24
     6ce:	51 96       	adiw	r26, 0x11	; 17
     6d0:	2c 91       	ld	r18, X
     6d2:	51 97       	sbiw	r26, 0x11	; 17
     6d4:	22 23       	and	r18, r18
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     6d8:	56 96       	adiw	r26, 0x16	; 22
     6da:	ed 91       	ld	r30, X+
     6dc:	fc 91       	ld	r31, X
     6de:	57 97       	sbiw	r26, 0x17	; 23
     6e0:	90 81       	ld	r25, Z
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	89 1b       	sub	r24, r25
     6e6:	08 95       	ret
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	08 95       	ret

000006ec <prvIsQueueEmpty>:
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	0f 92       	push	r0
     6f2:	fc 01       	movw	r30, r24
     6f4:	82 8d       	ldd	r24, Z+26	; 0x1a
     6f6:	81 11       	cpse	r24, r1
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <prvIsQueueEmpty+0x12>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <prvIsQueueEmpty+0x14>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	08 95       	ret

00000706 <prvIsQueueFull>:
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	0f 92       	push	r0
     70c:	fc 01       	movw	r30, r24
     70e:	22 8d       	ldd	r18, Z+26	; 0x1a
     710:	83 8d       	ldd	r24, Z+27	; 0x1b
     712:	28 13       	cpse	r18, r24
     714:	02 c0       	rjmp	.+4      	; 0x71a <prvIsQueueFull+0x14>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	01 c0       	rjmp	.+2      	; 0x71c <prvIsQueueFull+0x16>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	08 95       	ret

00000722 <prvCopyDataToQueue>:
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	ec 01       	movw	r28, r24
     72c:	04 2f       	mov	r16, r20
     72e:	1a 8d       	ldd	r17, Y+26	; 0x1a
     730:	4c 8d       	ldd	r20, Y+28	; 0x1c
     732:	41 11       	cpse	r20, r1
     734:	0c c0       	rjmp	.+24     	; 0x74e <prvCopyDataToQueue+0x2c>
     736:	88 81       	ld	r24, Y
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	89 2b       	or	r24, r25
     73c:	09 f0       	breq	.+2      	; 0x740 <prvCopyDataToQueue+0x1e>
     73e:	42 c0       	rjmp	.+132    	; 0x7c4 <prvCopyDataToQueue+0xa2>
     740:	8c 81       	ldd	r24, Y+4	; 0x04
     742:	9d 81       	ldd	r25, Y+5	; 0x05
     744:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <xTaskPriorityDisinherit>
     748:	1d 82       	std	Y+5, r1	; 0x05
     74a:	1c 82       	std	Y+4, r1	; 0x04
     74c:	42 c0       	rjmp	.+132    	; 0x7d2 <prvCopyDataToQueue+0xb0>
     74e:	01 11       	cpse	r16, r1
     750:	17 c0       	rjmp	.+46     	; 0x780 <prvCopyDataToQueue+0x5e>
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	9b 81       	ldd	r25, Y+3	; 0x03
     758:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <memcpy>
     75c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	9b 81       	ldd	r25, Y+3	; 0x03
     762:	82 0f       	add	r24, r18
     764:	91 1d       	adc	r25, r1
     766:	9b 83       	std	Y+3, r25	; 0x03
     768:	8a 83       	std	Y+2, r24	; 0x02
     76a:	2c 81       	ldd	r18, Y+4	; 0x04
     76c:	3d 81       	ldd	r19, Y+5	; 0x05
     76e:	82 17       	cp	r24, r18
     770:	93 07       	cpc	r25, r19
     772:	50 f1       	brcs	.+84     	; 0x7c8 <prvCopyDataToQueue+0xa6>
     774:	88 81       	ld	r24, Y
     776:	99 81       	ldd	r25, Y+1	; 0x01
     778:	9b 83       	std	Y+3, r25	; 0x03
     77a:	8a 83       	std	Y+2, r24	; 0x02
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	29 c0       	rjmp	.+82     	; 0x7d2 <prvCopyDataToQueue+0xb0>
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	9f 81       	ldd	r25, Y+7	; 0x07
     786:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <memcpy>
     78a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	91 95       	neg	r25
     790:	81 95       	neg	r24
     792:	91 09       	sbc	r25, r1
     794:	2e 81       	ldd	r18, Y+6	; 0x06
     796:	3f 81       	ldd	r19, Y+7	; 0x07
     798:	28 0f       	add	r18, r24
     79a:	39 1f       	adc	r19, r25
     79c:	3f 83       	std	Y+7, r19	; 0x07
     79e:	2e 83       	std	Y+6, r18	; 0x06
     7a0:	48 81       	ld	r20, Y
     7a2:	59 81       	ldd	r21, Y+1	; 0x01
     7a4:	24 17       	cp	r18, r20
     7a6:	35 07       	cpc	r19, r21
     7a8:	30 f4       	brcc	.+12     	; 0x7b6 <prvCopyDataToQueue+0x94>
     7aa:	2c 81       	ldd	r18, Y+4	; 0x04
     7ac:	3d 81       	ldd	r19, Y+5	; 0x05
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	9f 83       	std	Y+7, r25	; 0x07
     7b4:	8e 83       	std	Y+6, r24	; 0x06
     7b6:	02 30       	cpi	r16, 0x02	; 2
     7b8:	49 f4       	brne	.+18     	; 0x7cc <prvCopyDataToQueue+0xaa>
     7ba:	11 23       	and	r17, r17
     7bc:	49 f0       	breq	.+18     	; 0x7d0 <prvCopyDataToQueue+0xae>
     7be:	11 50       	subi	r17, 0x01	; 1
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <prvCopyDataToQueue+0xb0>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <prvCopyDataToQueue+0xb0>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <prvCopyDataToQueue+0xb0>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <prvCopyDataToQueue+0xb0>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	1f 5f       	subi	r17, 0xFF	; 255
     7d4:	1a 8f       	std	Y+26, r17	; 0x1a
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <prvUnlockQueue>:
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	0f 92       	push	r0
     7ee:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7f0:	0b c0       	rjmp	.+22     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7f2:	89 89       	ldd	r24, Y+17	; 0x11
     7f4:	88 23       	and	r24, r24
     7f6:	51 f0       	breq	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7f8:	ce 01       	movw	r24, r28
     7fa:	41 96       	adiw	r24, 0x11	; 17
     7fc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskRemoveFromEventList>
     800:	81 11       	cpse	r24, r1
     802:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskMissedYield>
     806:	11 50       	subi	r17, 0x01	; 1
     808:	11 16       	cp	r1, r17
     80a:	9c f3       	brlt	.-26     	; 0x7f2 <prvUnlockQueue+0x12>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	8e 8f       	std	Y+30, r24	; 0x1e
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	0f 92       	push	r0
     81a:	1d 8d       	ldd	r17, Y+29	; 0x1d
     81c:	0b c0       	rjmp	.+22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     81e:	88 85       	ldd	r24, Y+8	; 0x08
     820:	88 23       	and	r24, r24
     822:	51 f0       	breq	.+20     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     824:	ce 01       	movw	r24, r28
     826:	08 96       	adiw	r24, 0x08	; 8
     828:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskRemoveFromEventList>
     82c:	81 11       	cpse	r24, r1
     82e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskMissedYield>
     832:	11 50       	subi	r17, 0x01	; 1
     834:	11 16       	cp	r1, r17
     836:	9c f3       	brlt	.-26     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	8d 8f       	std	Y+29, r24	; 0x1d
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	08 95       	ret

00000848 <xQueueGenericReset>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	fc 01       	movw	r30, r24
     852:	36 2f       	mov	r19, r22
     854:	89 2b       	or	r24, r25
     856:	09 f4       	brne	.+2      	; 0x85a <xQueueGenericReset+0x12>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <__stack+0x95>
     85a:	23 8d       	ldd	r18, Z+27	; 0x1b
     85c:	22 23       	and	r18, r18
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	4b c0       	rjmp	.+150    	; 0x8f8 <__stack+0x99>
     862:	02 2f       	mov	r16, r18
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	b8 01       	movw	r22, r16
     86c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__udivmodhi4>
     870:	44 8d       	ldd	r20, Z+28	; 0x1c
     872:	84 2f       	mov	r24, r20
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	68 17       	cp	r22, r24
     878:	79 07       	cpc	r23, r25
     87a:	08 f4       	brcc	.+2      	; 0x87e <__stack+0x1f>
     87c:	3f c0       	rjmp	.+126    	; 0x8fc <__stack+0x9d>
     87e:	ef 01       	movw	r28, r30
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	0f 92       	push	r0
     886:	60 81       	ld	r22, Z
     888:	71 81       	ldd	r23, Z+1	; 0x01
     88a:	fb 01       	movw	r30, r22
     88c:	24 9f       	mul	r18, r20
     88e:	e0 0d       	add	r30, r0
     890:	f1 1d       	adc	r31, r1
     892:	11 24       	eor	r1, r1
     894:	fd 83       	std	Y+5, r31	; 0x05
     896:	ec 83       	std	Y+4, r30	; 0x04
     898:	1a 8e       	std	Y+26, r1	; 0x1a
     89a:	7b 83       	std	Y+3, r23	; 0x03
     89c:	6a 83       	std	Y+2, r22	; 0x02
     89e:	01 50       	subi	r16, 0x01	; 1
     8a0:	11 09       	sbc	r17, r1
     8a2:	80 9f       	mul	r24, r16
     8a4:	a0 01       	movw	r20, r0
     8a6:	81 9f       	mul	r24, r17
     8a8:	50 0d       	add	r21, r0
     8aa:	90 9f       	mul	r25, r16
     8ac:	50 0d       	add	r21, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	cb 01       	movw	r24, r22
     8b2:	84 0f       	add	r24, r20
     8b4:	95 1f       	adc	r25, r21
     8b6:	9f 83       	std	Y+7, r25	; 0x07
     8b8:	8e 83       	std	Y+6, r24	; 0x06
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	8d 8f       	std	Y+29, r24	; 0x1d
     8be:	8e 8f       	std	Y+30, r24	; 0x1e
     8c0:	31 11       	cpse	r19, r1
     8c2:	0c c0       	rjmp	.+24     	; 0x8dc <__stack+0x7d>
     8c4:	88 85       	ldd	r24, Y+8	; 0x08
     8c6:	88 23       	and	r24, r24
     8c8:	89 f0       	breq	.+34     	; 0x8ec <__stack+0x8d>
     8ca:	ce 01       	movw	r24, r28
     8cc:	08 96       	adiw	r24, 0x08	; 8
     8ce:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskRemoveFromEventList>
     8d2:	88 23       	and	r24, r24
     8d4:	59 f0       	breq	.+22     	; 0x8ec <__stack+0x8d>
     8d6:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     8da:	08 c0       	rjmp	.+16     	; 0x8ec <__stack+0x8d>
     8dc:	ce 01       	movw	r24, r28
     8de:	08 96       	adiw	r24, 0x08	; 8
     8e0:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     8e4:	ce 01       	movw	r24, r28
     8e6:	41 96       	adiw	r24, 0x11	; 17
     8e8:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__stack+0x9f>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__stack+0x9f>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <__stack+0x9f>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <prvInitialiseNewQueue>:
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	f8 01       	movw	r30, r16
     90e:	61 11       	cpse	r22, r1
     910:	03 c0       	rjmp	.+6      	; 0x918 <prvInitialiseNewQueue+0x10>
     912:	11 83       	std	Z+1, r17	; 0x01
     914:	00 83       	st	Z, r16
     916:	02 c0       	rjmp	.+4      	; 0x91c <prvInitialiseNewQueue+0x14>
     918:	51 83       	std	Z+1, r21	; 0x01
     91a:	40 83       	st	Z, r20
     91c:	83 8f       	std	Z+27, r24	; 0x1b
     91e:	64 8f       	std	Z+28, r22	; 0x1c
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	cf 01       	movw	r24, r30
     924:	0e 94 24 04 	call	0x848	; 0x848 <xQueueGenericReset>
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	08 95       	ret

0000092e <xQueueGenericCreate>:
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	38 2f       	mov	r19, r24
     93e:	e6 2f       	mov	r30, r22
     940:	88 23       	and	r24, r24
     942:	29 f1       	breq	.+74     	; 0x98e <xQueueGenericCreate+0x60>
     944:	68 2f       	mov	r22, r24
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__udivmodhi4>
     950:	8e 2f       	mov	r24, r30
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	68 17       	cp	r22, r24
     956:	79 07       	cpc	r23, r25
     958:	e8 f0       	brcs	.+58     	; 0x994 <xQueueGenericCreate+0x66>
     95a:	3e 9f       	mul	r19, r30
     95c:	c0 01       	movw	r24, r0
     95e:	11 24       	eor	r1, r1
     960:	81 3e       	cpi	r24, 0xE1	; 225
     962:	2f ef       	ldi	r18, 0xFF	; 255
     964:	92 07       	cpc	r25, r18
     966:	c8 f4       	brcc	.+50     	; 0x99a <xQueueGenericCreate+0x6c>
     968:	d4 2e       	mov	r13, r20
     96a:	de 2f       	mov	r29, r30
     96c:	c3 2f       	mov	r28, r19
     96e:	4f 96       	adiw	r24, 0x1f	; 31
     970:	0e 94 82 02 	call	0x504	; 0x504 <pvPortMalloc>
     974:	7c 01       	movw	r14, r24
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	91 f0       	breq	.+36     	; 0x99e <xQueueGenericCreate+0x70>
     97a:	8c 01       	movw	r16, r24
     97c:	2d 2d       	mov	r18, r13
     97e:	ac 01       	movw	r20, r24
     980:	41 5e       	subi	r20, 0xE1	; 225
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	6d 2f       	mov	r22, r29
     986:	8c 2f       	mov	r24, r28
     988:	0e 94 84 04 	call	0x908	; 0x908 <prvInitialiseNewQueue>
     98c:	08 c0       	rjmp	.+16     	; 0x99e <xQueueGenericCreate+0x70>
     98e:	e1 2c       	mov	r14, r1
     990:	f1 2c       	mov	r15, r1
     992:	05 c0       	rjmp	.+10     	; 0x99e <xQueueGenericCreate+0x70>
     994:	e1 2c       	mov	r14, r1
     996:	f1 2c       	mov	r15, r1
     998:	02 c0       	rjmp	.+4      	; 0x99e <xQueueGenericCreate+0x70>
     99a:	e1 2c       	mov	r14, r1
     99c:	f1 2c       	mov	r15, r1
     99e:	c7 01       	movw	r24, r14
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	08 95       	ret

000009b0 <xQueueGenericSend>:
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <xQueueGenericSend+0x12>
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <xQueueGenericSend+0x14>
     9c4:	1f 92       	push	r1
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	8c 01       	movw	r16, r24
     9cc:	7b 01       	movw	r14, r22
     9ce:	5d 83       	std	Y+5, r21	; 0x05
     9d0:	4c 83       	std	Y+4, r20	; 0x04
     9d2:	c2 2e       	mov	r12, r18
     9d4:	d1 2c       	mov	r13, r1
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	0f 92       	push	r0
     9dc:	f8 01       	movw	r30, r16
     9de:	92 8d       	ldd	r25, Z+26	; 0x1a
     9e0:	83 8d       	ldd	r24, Z+27	; 0x1b
     9e2:	98 17       	cp	r25, r24
     9e4:	18 f0       	brcs	.+6      	; 0x9ec <xQueueGenericSend+0x3c>
     9e6:	f2 e0       	ldi	r31, 0x02	; 2
     9e8:	cf 12       	cpse	r12, r31
     9ea:	19 c0       	rjmp	.+50     	; 0xa1e <xQueueGenericSend+0x6e>
     9ec:	4c 2d       	mov	r20, r12
     9ee:	b7 01       	movw	r22, r14
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 91 03 	call	0x722	; 0x722 <prvCopyDataToQueue>
     9f6:	f8 01       	movw	r30, r16
     9f8:	91 89       	ldd	r25, Z+17	; 0x11
     9fa:	99 23       	and	r25, r25
     9fc:	49 f0       	breq	.+18     	; 0xa10 <xQueueGenericSend+0x60>
     9fe:	c8 01       	movw	r24, r16
     a00:	41 96       	adiw	r24, 0x11	; 17
     a02:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskRemoveFromEventList>
     a06:	88 23       	and	r24, r24
     a08:	31 f0       	breq	.+12     	; 0xa16 <xQueueGenericSend+0x66>
     a0a:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <xQueueGenericSend+0x66>
     a10:	81 11       	cpse	r24, r1
     a12:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	4d c0       	rjmp	.+154    	; 0xab8 <xQueueGenericSend+0x108>
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	9d 81       	ldd	r25, Y+5	; 0x05
     a22:	89 2b       	or	r24, r25
     a24:	21 f4       	brne	.+8      	; 0xa2e <xQueueGenericSend+0x7e>
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	45 c0       	rjmp	.+138    	; 0xab8 <xQueueGenericSend+0x108>
     a2e:	d1 10       	cpse	r13, r1
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <xQueueGenericSend+0x8e>
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 95 0b 	call	0x172a	; 0x172a <vTaskInternalSetTimeOutState>
     a3a:	dd 24       	eor	r13, r13
     a3c:	d3 94       	inc	r13
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0e 94 67 08 	call	0x10ce	; 0x10ce <vTaskSuspendAll>
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	0f 92       	push	r0
     a4c:	f8 01       	movw	r30, r16
     a4e:	85 8d       	ldd	r24, Z+29	; 0x1d
     a50:	8f 3f       	cpi	r24, 0xFF	; 255
     a52:	09 f4       	brne	.+2      	; 0xa56 <xQueueGenericSend+0xa6>
     a54:	15 8e       	std	Z+29, r1	; 0x1d
     a56:	f8 01       	movw	r30, r16
     a58:	86 8d       	ldd	r24, Z+30	; 0x1e
     a5a:	8f 3f       	cpi	r24, 0xFF	; 255
     a5c:	09 f4       	brne	.+2      	; 0xa60 <xQueueGenericSend+0xb0>
     a5e:	16 8e       	std	Z+30, r1	; 0x1e
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	be 01       	movw	r22, r28
     a66:	6c 5f       	subi	r22, 0xFC	; 252
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <xTaskCheckForTimeOut>
     a72:	81 11       	cpse	r24, r1
     a74:	1b c0       	rjmp	.+54     	; 0xaac <xQueueGenericSend+0xfc>
     a76:	c8 01       	movw	r24, r16
     a78:	0e 94 83 03 	call	0x706	; 0x706 <prvIsQueueFull>
     a7c:	88 23       	and	r24, r24
     a7e:	81 f0       	breq	.+32     	; 0xaa0 <xQueueGenericSend+0xf0>
     a80:	6c 81       	ldd	r22, Y+4	; 0x04
     a82:	7d 81       	ldd	r23, Y+5	; 0x05
     a84:	c8 01       	movw	r24, r16
     a86:	08 96       	adiw	r24, 0x08	; 8
     a88:	0e 94 c6 0a 	call	0x158c	; 0x158c <vTaskPlaceOnEventList>
     a8c:	c8 01       	movw	r24, r16
     a8e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>
     a92:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
     a96:	81 11       	cpse	r24, r1
     a98:	9e cf       	rjmp	.-196    	; 0x9d6 <xQueueGenericSend+0x26>
     a9a:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     a9e:	9b cf       	rjmp	.-202    	; 0x9d6 <xQueueGenericSend+0x26>
     aa0:	c8 01       	movw	r24, r16
     aa2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>
     aa6:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
     aaa:	95 cf       	rjmp	.-214    	; 0x9d6 <xQueueGenericSend+0x26>
     aac:	c8 01       	movw	r24, r16
     aae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>
     ab2:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	08 95       	ret

00000ad4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <xQueueSemaphoreTake+0xe>
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <xQueueSemaphoreTake+0x10>
     ae4:	1f 92       	push	r1
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	8c 01       	movw	r16, r24
     aec:	7d 83       	std	Y+5, r23	; 0x05
     aee:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     af0:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     af2:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     afa:	f8 01       	movw	r30, r16
     afc:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     afe:	88 23       	and	r24, r24
     b00:	d1 f0       	breq	.+52     	; 0xb36 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	89 2b       	or	r24, r25
     b0c:	29 f4       	brne	.+10     	; 0xb18 <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     b0e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <pvTaskIncrementMutexHeldCount>
     b12:	f8 01       	movw	r30, r16
     b14:	95 83       	std	Z+5, r25	; 0x05
     b16:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b18:	f8 01       	movw	r30, r16
     b1a:	80 85       	ldd	r24, Z+8	; 0x08
     b1c:	88 23       	and	r24, r24
     b1e:	39 f0       	breq	.+14     	; 0xb2e <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b20:	c8 01       	movw	r24, r16
     b22:	08 96       	adiw	r24, 0x08	; 8
     b24:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskRemoveFromEventList>
     b28:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     b2a:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	74 c0       	rjmp	.+232    	; 0xc1e <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     b36:	8c 81       	ldd	r24, Y+4	; 0x04
     b38:	9d 81       	ldd	r25, Y+5	; 0x05
     b3a:	89 2b       	or	r24, r25
     b3c:	21 f4       	brne	.+8      	; 0xb46 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	6c c0       	rjmp	.+216    	; 0xc1e <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     b46:	f1 10       	cpse	r15, r1
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	0e 94 95 0b 	call	0x172a	; 0x172a <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     b52:	ff 24       	eor	r15, r15
     b54:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     b5a:	0e 94 67 08 	call	0x10ce	; 0x10ce <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	0f 92       	push	r0
     b64:	f8 01       	movw	r30, r16
     b66:	85 8d       	ldd	r24, Z+29	; 0x1d
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	09 f4       	brne	.+2      	; 0xb6e <xQueueSemaphoreTake+0x9a>
     b6c:	15 8e       	std	Z+29, r1	; 0x1d
     b6e:	f8 01       	movw	r30, r16
     b70:	86 8d       	ldd	r24, Z+30	; 0x1e
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	09 f4       	brne	.+2      	; 0xb78 <xQueueSemaphoreTake+0xa4>
     b76:	16 8e       	std	Z+30, r1	; 0x1e
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     b7c:	be 01       	movw	r22, r28
     b7e:	6c 5f       	subi	r22, 0xFC	; 252
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 a0 0b 	call	0x1740	; 0x1740 <xTaskCheckForTimeOut>
     b8a:	81 11       	cpse	r24, r1
     b8c:	2a c0       	rjmp	.+84     	; 0xbe2 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 76 03 	call	0x6ec	; 0x6ec <prvIsQueueEmpty>
     b94:	88 23       	and	r24, r24
     b96:	f9 f0       	breq	.+62     	; 0xbd6 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b98:	f8 01       	movw	r30, r16
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	89 2b       	or	r24, r25
     ba0:	51 f4       	brne	.+20     	; 0xbb6 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     ba8:	84 81       	ldd	r24, Z+4	; 0x04
     baa:	95 81       	ldd	r25, Z+5	; 0x05
     bac:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <xTaskPriorityInherit>
     bb0:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     bb6:	6c 81       	ldd	r22, Y+4	; 0x04
     bb8:	7d 81       	ldd	r23, Y+5	; 0x05
     bba:	c8 01       	movw	r24, r16
     bbc:	41 96       	adiw	r24, 0x11	; 17
     bbe:	0e 94 c6 0a 	call	0x158c	; 0x158c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     bc8:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
     bcc:	81 11       	cpse	r24, r1
     bce:	92 cf       	rjmp	.-220    	; 0xaf4 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     bd0:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     bd4:	8f cf       	rjmp	.-226    	; 0xaf4 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     bd6:	c8 01       	movw	r24, r16
     bd8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     bdc:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
     be0:	89 cf       	rjmp	.-238    	; 0xaf4 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     be2:	c8 01       	movw	r24, r16
     be4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     be8:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 76 03 	call	0x6ec	; 0x6ec <prvIsQueueEmpty>
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <xQueueSemaphoreTake+0x124>
     bf6:	7e cf       	rjmp	.-260    	; 0xaf4 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     bf8:	ee 20       	and	r14, r14
     bfa:	81 f0       	breq	.+32     	; 0xc1c <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 66 03 	call	0x6cc	; 0x6cc <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     c08:	68 2f       	mov	r22, r24
     c0a:	f8 01       	movw	r30, r16
     c0c:	84 81       	ldd	r24, Z+4	; 0x04
     c0e:	95 81       	ldd	r25, Z+5	; 0x05
     c10:	0e 94 cd 0c 	call	0x199a	; 0x199a <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <xQueueSemaphoreTake+0x14a>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     c36:	e0 91 8e 06 	lds	r30, 0x068E	; 0x80068e <pxDelayedTaskList>
     c3a:	f0 91 8f 06 	lds	r31, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
     c3e:	80 81       	ld	r24, Z
     c40:	81 11       	cpse	r24, r1
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <prvResetNextTaskUnblockTime+0x1c>
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
     c4c:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
     c50:	08 95       	ret
     c52:	e0 91 8e 06 	lds	r30, 0x068E	; 0x80068e <pxDelayedTaskList>
     c56:	f0 91 8f 06 	lds	r31, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
     c5a:	05 80       	ldd	r0, Z+5	; 0x05
     c5c:	f6 81       	ldd	r31, Z+6	; 0x06
     c5e:	e0 2d       	mov	r30, r0
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
     c68:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
     c6c:	08 95       	ret

00000c6e <prvDeleteTCB>:
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	ec 01       	movw	r28, r24
     c74:	8f 89       	ldd	r24, Y+23	; 0x17
     c76:	98 8d       	ldd	r25, Y+24	; 0x18
     c78:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
     c7c:	ce 01       	movw	r24, r28
     c7e:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <prvInitialiseNewTask>:
     c88:	6f 92       	push	r6
     c8a:	7f 92       	push	r7
     c8c:	8f 92       	push	r8
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	4c 01       	movw	r8, r24
     ca8:	d5 01       	movw	r26, r10
     caa:	57 96       	adiw	r26, 0x17	; 23
     cac:	8d 91       	ld	r24, X+
     cae:	9c 91       	ld	r25, X
     cb0:	58 97       	sbiw	r26, 0x18	; 24
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	31 09       	sbc	r19, r1
     cb6:	3c 01       	movw	r6, r24
     cb8:	62 0e       	add	r6, r18
     cba:	73 1e       	adc	r7, r19
     cbc:	61 15       	cp	r22, r1
     cbe:	71 05       	cpc	r23, r1
     cc0:	89 f4       	brne	.+34     	; 0xce4 <prvInitialiseNewTask+0x5c>
     cc2:	16 c0       	rjmp	.+44     	; 0xcf0 <prvInitialiseNewTask+0x68>
     cc4:	82 2f       	mov	r24, r18
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fb 01       	movw	r30, r22
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	30 81       	ld	r19, Z
     cd0:	d5 01       	movw	r26, r10
     cd2:	a8 0f       	add	r26, r24
     cd4:	b9 1f       	adc	r27, r25
     cd6:	59 96       	adiw	r26, 0x19	; 25
     cd8:	3c 93       	st	X, r19
     cda:	80 81       	ld	r24, Z
     cdc:	88 23       	and	r24, r24
     cde:	29 f0       	breq	.+10     	; 0xcea <prvInitialiseNewTask+0x62>
     ce0:	2f 5f       	subi	r18, 0xFF	; 255
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <prvInitialiseNewTask+0x5e>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	28 30       	cpi	r18, 0x08	; 8
     ce8:	68 f3       	brcs	.-38     	; 0xcc4 <prvInitialiseNewTask+0x3c>
     cea:	f5 01       	movw	r30, r10
     cec:	10 a2       	std	Z+32, r1	; 0x20
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <prvInitialiseNewTask+0x6e>
     cf0:	d5 01       	movw	r26, r10
     cf2:	59 96       	adiw	r26, 0x19	; 25
     cf4:	1c 92       	st	X, r1
     cf6:	b3 e0       	ldi	r27, 0x03	; 3
     cf8:	be 15       	cp	r27, r14
     cfa:	20 f4       	brcc	.+8      	; 0xd04 <prvInitialiseNewTask+0x7c>
     cfc:	0f 2e       	mov	r0, r31
     cfe:	f3 e0       	ldi	r31, 0x03	; 3
     d00:	ef 2e       	mov	r14, r31
     d02:	f0 2d       	mov	r31, r0
     d04:	f5 01       	movw	r30, r10
     d06:	e6 8a       	std	Z+22, r14	; 0x16
     d08:	e1 a2       	std	Z+33, r14	; 0x21
     d0a:	12 a2       	std	Z+34, r1	; 0x22
     d0c:	c5 01       	movw	r24, r10
     d0e:	02 96       	adiw	r24, 0x02	; 2
     d10:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     d14:	c5 01       	movw	r24, r10
     d16:	0c 96       	adiw	r24, 0x0c	; 12
     d18:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     d1c:	d5 01       	movw	r26, r10
     d1e:	19 96       	adiw	r26, 0x09	; 9
     d20:	bc 92       	st	X, r11
     d22:	ae 92       	st	-X, r10
     d24:	18 97       	sbiw	r26, 0x08	; 8
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	8e 19       	sub	r24, r14
     d2c:	91 09       	sbc	r25, r1
     d2e:	1d 96       	adiw	r26, 0x0d	; 13
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	1c 97       	sbiw	r26, 0x0c	; 12
     d36:	53 96       	adiw	r26, 0x13	; 19
     d38:	bc 92       	st	X, r11
     d3a:	ae 92       	st	-X, r10
     d3c:	52 97       	sbiw	r26, 0x12	; 18
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	f5 01       	movw	r30, r10
     d42:	b3 96       	adiw	r30, 0x23	; 35
     d44:	df 01       	movw	r26, r30
     d46:	1d 92       	st	X+, r1
     d48:	8a 95       	dec	r24
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <prvInitialiseNewTask+0xbe>
     d4c:	f5 01       	movw	r30, r10
     d4e:	17 a2       	std	Z+39, r1	; 0x27
     d50:	a8 01       	movw	r20, r16
     d52:	b4 01       	movw	r22, r8
     d54:	c3 01       	movw	r24, r6
     d56:	0e 94 bc 00 	call	0x178	; 0x178 <pxPortInitialiseStack>
     d5a:	d5 01       	movw	r26, r10
     d5c:	8d 93       	st	X+, r24
     d5e:	9c 93       	st	X, r25
     d60:	c1 14       	cp	r12, r1
     d62:	d1 04       	cpc	r13, r1
     d64:	19 f0       	breq	.+6      	; 0xd6c <prvInitialiseNewTask+0xe4>
     d66:	f6 01       	movw	r30, r12
     d68:	b1 82       	std	Z+1, r11	; 0x01
     d6a:	a0 82       	st	Z, r10
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	7f 90       	pop	r7
     d84:	6f 90       	pop	r6
     d86:	08 95       	ret

00000d88 <prvInitialiseTaskLists>:
     d88:	cf 93       	push	r28
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <prvInitialiseTaskLists+0x26>
     d8e:	8c 2f       	mov	r24, r28
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9c 01       	movw	r18, r24
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	8e 55       	subi	r24, 0x5E	; 94
     da6:	99 4f       	sbci	r25, 0xF9	; 249
     da8:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     dac:	cf 5f       	subi	r28, 0xFF	; 255
     dae:	c4 30       	cpi	r28, 0x04	; 4
     db0:	70 f3       	brcs	.-36     	; 0xd8e <prvInitialiseTaskLists+0x6>
     db2:	89 e9       	ldi	r24, 0x99	; 153
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     dba:	80 e9       	ldi	r24, 0x90	; 144
     dbc:	96 e0       	ldi	r25, 0x06	; 6
     dbe:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     dc2:	83 e8       	ldi	r24, 0x83	; 131
     dc4:	96 e0       	ldi	r25, 0x06	; 6
     dc6:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     dca:	8a e7       	ldi	r24, 0x7A	; 122
     dcc:	96 e0       	ldi	r25, 0x06	; 6
     dce:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     dd2:	89 e9       	ldi	r24, 0x99	; 153
     dd4:	96 e0       	ldi	r25, 0x06	; 6
     dd6:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <pxDelayedTaskList+0x1>
     dda:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <pxDelayedTaskList>
     dde:	80 e9       	ldi	r24, 0x90	; 144
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <pxOverflowDelayedTaskList+0x1>
     de6:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <pxOverflowDelayedTaskList>
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <prvAddNewTaskToReadyList>:
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	0f 92       	push	r0
     dfa:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxCurrentNumberOfTasks>
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxCurrentNumberOfTasks>
     e04:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     e08:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     e0c:	89 2b       	or	r24, r25
     e0e:	59 f4       	brne	.+22     	; 0xe26 <prvAddNewTaskToReadyList+0x38>
     e10:	d0 93 c7 06 	sts	0x06C7, r29	; 0x8006c7 <pxCurrentTCB+0x1>
     e14:	c0 93 c6 06 	sts	0x06C6, r28	; 0x8006c6 <pxCurrentTCB>
     e18:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxCurrentNumberOfTasks>
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	99 f4       	brne	.+38     	; 0xe46 <prvAddNewTaskToReadyList+0x58>
     e20:	0e 94 c4 06 	call	0xd88	; 0xd88 <prvInitialiseTaskLists>
     e24:	10 c0       	rjmp	.+32     	; 0xe46 <prvAddNewTaskToReadyList+0x58>
     e26:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xSchedulerRunning>
     e2a:	81 11       	cpse	r24, r1
     e2c:	0c c0       	rjmp	.+24     	; 0xe46 <prvAddNewTaskToReadyList+0x58>
     e2e:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     e32:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     e36:	96 89       	ldd	r25, Z+22	; 0x16
     e38:	8e 89       	ldd	r24, Y+22	; 0x16
     e3a:	89 17       	cp	r24, r25
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <prvAddNewTaskToReadyList+0x58>
     e3e:	d0 93 c7 06 	sts	0x06C7, r29	; 0x8006c7 <pxCurrentTCB+0x1>
     e42:	c0 93 c6 06 	sts	0x06C6, r28	; 0x8006c6 <pxCurrentTCB>
     e46:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxTaskNumber>
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxTaskNumber>
     e50:	8e 89       	ldd	r24, Y+22	; 0x16
     e52:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
     e56:	98 17       	cp	r25, r24
     e58:	10 f4       	brcc	.+4      	; 0xe5e <prvAddNewTaskToReadyList+0x70>
     e5a:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	fc 01       	movw	r30, r24
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	8e 0f       	add	r24, r30
     e70:	9f 1f       	adc	r25, r31
     e72:	fc 01       	movw	r30, r24
     e74:	ee 55       	subi	r30, 0x5E	; 94
     e76:	f9 4f       	sbci	r31, 0xF9	; 249
     e78:	01 80       	ldd	r0, Z+1	; 0x01
     e7a:	f2 81       	ldd	r31, Z+2	; 0x02
     e7c:	e0 2d       	mov	r30, r0
     e7e:	fd 83       	std	Y+5, r31	; 0x05
     e80:	ec 83       	std	Y+4, r30	; 0x04
     e82:	84 81       	ldd	r24, Z+4	; 0x04
     e84:	95 81       	ldd	r25, Z+5	; 0x05
     e86:	9f 83       	std	Y+7, r25	; 0x07
     e88:	8e 83       	std	Y+6, r24	; 0x06
     e8a:	a4 81       	ldd	r26, Z+4	; 0x04
     e8c:	b5 81       	ldd	r27, Z+5	; 0x05
     e8e:	ce 01       	movw	r24, r28
     e90:	02 96       	adiw	r24, 0x02	; 2
     e92:	13 96       	adiw	r26, 0x03	; 3
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	95 83       	std	Z+5, r25	; 0x05
     e9c:	84 83       	std	Z+4, r24	; 0x04
     e9e:	ee 89       	ldd	r30, Y+22	; 0x16
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	cf 01       	movw	r24, r30
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	e8 0f       	add	r30, r24
     eb2:	f9 1f       	adc	r31, r25
     eb4:	ee 55       	subi	r30, 0x5E	; 94
     eb6:	f9 4f       	sbci	r31, 0xF9	; 249
     eb8:	fb 87       	std	Y+11, r31	; 0x0b
     eba:	ea 87       	std	Y+10, r30	; 0x0a
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 83       	st	Z, r24
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xSchedulerRunning>
     eca:	88 23       	and	r24, r24
     ecc:	51 f0       	breq	.+20     	; 0xee2 <prvAddNewTaskToReadyList+0xf4>
     ece:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     ed2:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     ed6:	96 89       	ldd	r25, Z+22	; 0x16
     ed8:	8e 89       	ldd	r24, Y+22	; 0x16
     eda:	98 17       	cp	r25, r24
     edc:	10 f4       	brcc	.+4      	; 0xee2 <prvAddNewTaskToReadyList+0xf4>
     ede:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <prvCheckTasksWaitingTermination>:
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	1c c0       	rjmp	.+56     	; 0xf26 <prvCheckTasksWaitingTermination+0x3e>
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	e0 91 7f 06 	lds	r30, 0x067F	; 0x80067f <xTasksWaitingTermination+0x5>
     ef8:	f0 91 80 06 	lds	r31, 0x0680	; 0x800680 <xTasksWaitingTermination+0x6>
     efc:	c6 81       	ldd	r28, Z+6	; 0x06
     efe:	d7 81       	ldd	r29, Z+7	; 0x07
     f00:	ce 01       	movw	r24, r28
     f02:	02 96       	adiw	r24, 0x02	; 2
     f04:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
     f08:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxCurrentNumberOfTasks>
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxCurrentNumberOfTasks>
     f12:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <uxDeletedTasksWaitingCleanUp>
     f16:	81 50       	subi	r24, 0x01	; 1
     f18:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <uxDeletedTasksWaitingCleanUp>
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	ce 01       	movw	r24, r28
     f22:	0e 94 37 06 	call	0xc6e	; 0xc6e <prvDeleteTCB>
     f26:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <uxDeletedTasksWaitingCleanUp>
     f2a:	81 11       	cpse	r24, r1
     f2c:	e0 cf       	rjmp	.-64     	; 0xeee <prvCheckTasksWaitingTermination+0x6>
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <prvIdleTask>:
     f34:	0e 94 74 07 	call	0xee8	; 0xee8 <prvCheckTasksWaitingTermination>
     f38:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <pxReadyTasksLists>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	d0 f3       	brcs	.-12     	; 0xf34 <prvIdleTask>
     f40:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     f44:	f7 cf       	rjmp	.-18     	; 0xf34 <prvIdleTask>

00000f46 <prvAddCurrentTaskToDelayedList>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
     f50:	00 91 76 06 	lds	r16, 0x0676	; 0x800676 <xTickCount>
     f54:	10 91 77 06 	lds	r17, 0x0677	; 0x800677 <xTickCount+0x1>
     f58:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     f5c:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     f60:	02 96       	adiw	r24, 0x02	; 2
     f62:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
     f66:	c0 0f       	add	r28, r16
     f68:	d1 1f       	adc	r29, r17
     f6a:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     f6e:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     f72:	d3 83       	std	Z+3, r29	; 0x03
     f74:	c2 83       	std	Z+2, r28	; 0x02
     f76:	c0 17       	cp	r28, r16
     f78:	d1 07       	cpc	r29, r17
     f7a:	68 f4       	brcc	.+26     	; 0xf96 <prvAddCurrentTaskToDelayedList+0x50>
     f7c:	60 91 c6 06 	lds	r22, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     f80:	70 91 c7 06 	lds	r23, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     f84:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <pxOverflowDelayedTaskList>
     f88:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <pxOverflowDelayedTaskList+0x1>
     f8c:	6e 5f       	subi	r22, 0xFE	; 254
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsert>
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <prvAddCurrentTaskToDelayedList+0x7e>
     f96:	60 91 c6 06 	lds	r22, 0x06C6	; 0x8006c6 <pxCurrentTCB>
     f9a:	70 91 c7 06 	lds	r23, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
     f9e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <pxDelayedTaskList>
     fa2:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
     fa6:	6e 5f       	subi	r22, 0xFE	; 254
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsert>
     fae:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xNextTaskUnblockTime>
     fb2:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <xNextTaskUnblockTime+0x1>
     fb6:	c8 17       	cp	r28, r24
     fb8:	d9 07       	cpc	r29, r25
     fba:	20 f4       	brcc	.+8      	; 0xfc4 <prvAddCurrentTaskToDelayedList+0x7e>
     fbc:	d0 93 6e 06 	sts	0x066E, r29	; 0x80066e <xNextTaskUnblockTime+0x1>
     fc0:	c0 93 6d 06 	sts	0x066D, r28	; 0x80066d <xNextTaskUnblockTime>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <xTaskCreate>:
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	4f 92       	push	r4
     fd4:	5f 92       	push	r5
     fd6:	6f 92       	push	r6
     fd8:	7f 92       	push	r7
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	3c 01       	movw	r6, r24
     ff4:	1b 01       	movw	r2, r22
     ff6:	5a 01       	movw	r10, r20
     ff8:	29 01       	movw	r4, r18
     ffa:	ca 01       	movw	r24, r20
     ffc:	0e 94 82 02 	call	0x504	; 0x504 <pvPortMalloc>
    1000:	6c 01       	movw	r12, r24
    1002:	89 2b       	or	r24, r25
    1004:	71 f0       	breq	.+28     	; 0x1022 <xTaskCreate+0x54>
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 82 02 	call	0x504	; 0x504 <pvPortMalloc>
    100e:	ec 01       	movw	r28, r24
    1010:	89 2b       	or	r24, r25
    1012:	19 f0       	breq	.+6      	; 0x101a <xTaskCreate+0x4c>
    1014:	d8 8e       	std	Y+24, r13	; 0x18
    1016:	cf 8a       	std	Y+23, r12	; 0x17
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <xTaskCreate+0x58>
    101a:	c6 01       	movw	r24, r12
    101c:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <xTaskCreate+0x58>
    1022:	c0 e0       	ldi	r28, 0x00	; 0
    1024:	d0 e0       	ldi	r29, 0x00	; 0
    1026:	20 97       	sbiw	r28, 0x00	; 0
    1028:	91 f0       	breq	.+36     	; 0x104e <xTaskCreate+0x80>
    102a:	95 01       	movw	r18, r10
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	81 2c       	mov	r8, r1
    1032:	91 2c       	mov	r9, r1
    1034:	5e 01       	movw	r10, r28
    1036:	67 01       	movw	r12, r14
    1038:	e0 2e       	mov	r14, r16
    103a:	82 01       	movw	r16, r4
    103c:	b1 01       	movw	r22, r2
    103e:	c3 01       	movw	r24, r6
    1040:	0e 94 44 06 	call	0xc88	; 0xc88 <prvInitialiseNewTask>
    1044:	ce 01       	movw	r24, r28
    1046:	0e 94 f7 06 	call	0xdee	; 0xdee <prvAddNewTaskToReadyList>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <xTaskCreate+0x82>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	9f 90       	pop	r9
    1066:	8f 90       	pop	r8
    1068:	7f 90       	pop	r7
    106a:	6f 90       	pop	r6
    106c:	5f 90       	pop	r5
    106e:	4f 90       	pop	r4
    1070:	3f 90       	pop	r3
    1072:	2f 90       	pop	r2
    1074:	08 95       	ret

00001076 <vTaskStartScheduler>:
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	0f 2e       	mov	r0, r31
    107e:	fb e6       	ldi	r31, 0x6B	; 107
    1080:	ef 2e       	mov	r14, r31
    1082:	f6 e0       	ldi	r31, 0x06	; 6
    1084:	ff 2e       	mov	r15, r31
    1086:	f0 2d       	mov	r31, r0
    1088:	00 e0       	ldi	r16, 0x00	; 0
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	45 e5       	ldi	r20, 0x55	; 85
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	61 e6       	ldi	r22, 0x61	; 97
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	8a e9       	ldi	r24, 0x9A	; 154
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskCreate>
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	81 f4       	brne	.+32     	; 0x10c2 <vTaskStartScheduler+0x4c>
    10a2:	f8 94       	cli
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    10ac:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xSchedulerRunning>
    10b6:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <xTickCount+0x1>
    10ba:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <xTickCount>
    10be:	0e 94 28 01 	call	0x250	; 0x250 <xPortStartScheduler>
    10c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <vTaskSuspendAll>:
    10ce:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxSchedulerSuspended>
    10d8:	08 95       	ret

000010da <xTaskIncrementTick>:
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    10e6:	81 11       	cpse	r24, r1
    10e8:	01 c1       	rjmp	.+514    	; 0x12ec <xTaskIncrementTick+0x212>
    10ea:	c0 91 76 06 	lds	r28, 0x0676	; 0x800676 <xTickCount>
    10ee:	d0 91 77 06 	lds	r29, 0x0677	; 0x800677 <xTickCount+0x1>
    10f2:	8e 01       	movw	r16, r28
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	10 93 77 06 	sts	0x0677, r17	; 0x800677 <xTickCount+0x1>
    10fc:	00 93 76 06 	sts	0x0676, r16	; 0x800676 <xTickCount>
    1100:	01 15       	cp	r16, r1
    1102:	11 05       	cpc	r17, r1
    1104:	b9 f4       	brne	.+46     	; 0x1134 <xTaskIncrementTick+0x5a>
    1106:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <pxDelayedTaskList>
    110a:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
    110e:	20 91 8c 06 	lds	r18, 0x068C	; 0x80068c <pxOverflowDelayedTaskList>
    1112:	30 91 8d 06 	lds	r19, 0x068D	; 0x80068d <pxOverflowDelayedTaskList+0x1>
    1116:	30 93 8f 06 	sts	0x068F, r19	; 0x80068f <pxDelayedTaskList+0x1>
    111a:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <pxDelayedTaskList>
    111e:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <pxOverflowDelayedTaskList+0x1>
    1122:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <pxOverflowDelayedTaskList>
    1126:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xNumOfOverflows>
    112a:	8f 5f       	subi	r24, 0xFF	; 255
    112c:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNumOfOverflows>
    1130:	0e 94 1b 06 	call	0xc36	; 0xc36 <prvResetNextTaskUnblockTime>
    1134:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xNextTaskUnblockTime>
    1138:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <xNextTaskUnblockTime+0x1>
    113c:	08 17       	cp	r16, r24
    113e:	19 07       	cpc	r17, r25
    1140:	20 f4       	brcc	.+8      	; 0x114a <xTaskIncrementTick+0x70>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	b8 c0       	rjmp	.+368    	; 0x12b6 <xTaskIncrementTick+0x1dc>
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	01 c0       	rjmp	.+2      	; 0x114c <xTaskIncrementTick+0x72>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	e0 91 8e 06 	lds	r30, 0x068E	; 0x80068e <pxDelayedTaskList>
    1150:	f0 91 8f 06 	lds	r31, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
    1154:	90 81       	ld	r25, Z
    1156:	91 11       	cpse	r25, r1
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <xTaskIncrementTick+0x8e>
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	30 93 6e 06 	sts	0x066E, r19	; 0x80066e <xNextTaskUnblockTime+0x1>
    1162:	20 93 6d 06 	sts	0x066D, r18	; 0x80066d <xNextTaskUnblockTime>
    1166:	a7 c0       	rjmp	.+334    	; 0x12b6 <xTaskIncrementTick+0x1dc>
    1168:	e0 91 8e 06 	lds	r30, 0x068E	; 0x80068e <pxDelayedTaskList>
    116c:	f0 91 8f 06 	lds	r31, 0x068F	; 0x80068f <pxDelayedTaskList+0x1>
    1170:	05 80       	ldd	r0, Z+5	; 0x05
    1172:	f6 81       	ldd	r31, Z+6	; 0x06
    1174:	e0 2d       	mov	r30, r0
    1176:	06 80       	ldd	r0, Z+6	; 0x06
    1178:	f7 81       	ldd	r31, Z+7	; 0x07
    117a:	e0 2d       	mov	r30, r0
    117c:	22 81       	ldd	r18, Z+2	; 0x02
    117e:	33 81       	ldd	r19, Z+3	; 0x03
    1180:	02 17       	cp	r16, r18
    1182:	13 07       	cpc	r17, r19
    1184:	28 f4       	brcc	.+10     	; 0x1190 <xTaskIncrementTick+0xb6>
    1186:	30 93 6e 06 	sts	0x066E, r19	; 0x80066e <xNextTaskUnblockTime+0x1>
    118a:	20 93 6d 06 	sts	0x066D, r18	; 0x80066d <xNextTaskUnblockTime>
    118e:	93 c0       	rjmp	.+294    	; 0x12b6 <xTaskIncrementTick+0x1dc>
    1190:	a2 85       	ldd	r26, Z+10	; 0x0a
    1192:	b3 85       	ldd	r27, Z+11	; 0x0b
    1194:	24 81       	ldd	r18, Z+4	; 0x04
    1196:	35 81       	ldd	r19, Z+5	; 0x05
    1198:	46 81       	ldd	r20, Z+6	; 0x06
    119a:	57 81       	ldd	r21, Z+7	; 0x07
    119c:	e9 01       	movw	r28, r18
    119e:	5d 83       	std	Y+5, r21	; 0x05
    11a0:	4c 83       	std	Y+4, r20	; 0x04
    11a2:	26 81       	ldd	r18, Z+6	; 0x06
    11a4:	37 81       	ldd	r19, Z+7	; 0x07
    11a6:	44 81       	ldd	r20, Z+4	; 0x04
    11a8:	55 81       	ldd	r21, Z+5	; 0x05
    11aa:	e9 01       	movw	r28, r18
    11ac:	5b 83       	std	Y+3, r21	; 0x03
    11ae:	4a 83       	std	Y+2, r20	; 0x02
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	2d 91       	ld	r18, X+
    11b4:	3c 91       	ld	r19, X
    11b6:	12 97       	sbiw	r26, 0x02	; 2
    11b8:	af 01       	movw	r20, r30
    11ba:	4e 5f       	subi	r20, 0xFE	; 254
    11bc:	5f 4f       	sbci	r21, 0xFF	; 255
    11be:	24 17       	cp	r18, r20
    11c0:	35 07       	cpc	r19, r21
    11c2:	31 f4       	brne	.+12     	; 0x11d0 <xTaskIncrementTick+0xf6>
    11c4:	26 81       	ldd	r18, Z+6	; 0x06
    11c6:	37 81       	ldd	r19, Z+7	; 0x07
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	3c 93       	st	X, r19
    11cc:	2e 93       	st	-X, r18
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	13 86       	std	Z+11, r1	; 0x0b
    11d2:	12 86       	std	Z+10, r1	; 0x0a
    11d4:	9c 91       	ld	r25, X
    11d6:	91 50       	subi	r25, 0x01	; 1
    11d8:	9c 93       	st	X, r25
    11da:	a4 89       	ldd	r26, Z+20	; 0x14
    11dc:	b5 89       	ldd	r27, Z+21	; 0x15
    11de:	10 97       	sbiw	r26, 0x00	; 0
    11e0:	19 f1       	breq	.+70     	; 0x1228 <xTaskIncrementTick+0x14e>
    11e2:	26 85       	ldd	r18, Z+14	; 0x0e
    11e4:	37 85       	ldd	r19, Z+15	; 0x0f
    11e6:	60 89       	ldd	r22, Z+16	; 0x10
    11e8:	71 89       	ldd	r23, Z+17	; 0x11
    11ea:	e9 01       	movw	r28, r18
    11ec:	7d 83       	std	Y+5, r23	; 0x05
    11ee:	6c 83       	std	Y+4, r22	; 0x04
    11f0:	20 89       	ldd	r18, Z+16	; 0x10
    11f2:	31 89       	ldd	r19, Z+17	; 0x11
    11f4:	66 85       	ldd	r22, Z+14	; 0x0e
    11f6:	77 85       	ldd	r23, Z+15	; 0x0f
    11f8:	e9 01       	movw	r28, r18
    11fa:	7b 83       	std	Y+3, r23	; 0x03
    11fc:	6a 83       	std	Y+2, r22	; 0x02
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	6d 91       	ld	r22, X+
    1202:	7c 91       	ld	r23, X
    1204:	12 97       	sbiw	r26, 0x02	; 2
    1206:	9f 01       	movw	r18, r30
    1208:	24 5f       	subi	r18, 0xF4	; 244
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	62 17       	cp	r22, r18
    120e:	73 07       	cpc	r23, r19
    1210:	31 f4       	brne	.+12     	; 0x121e <xTaskIncrementTick+0x144>
    1212:	20 89       	ldd	r18, Z+16	; 0x10
    1214:	31 89       	ldd	r19, Z+17	; 0x11
    1216:	12 96       	adiw	r26, 0x02	; 2
    1218:	3c 93       	st	X, r19
    121a:	2e 93       	st	-X, r18
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	15 8a       	std	Z+21, r1	; 0x15
    1220:	14 8a       	std	Z+20, r1	; 0x14
    1222:	9c 91       	ld	r25, X
    1224:	91 50       	subi	r25, 0x01	; 1
    1226:	9c 93       	st	X, r25
    1228:	26 89       	ldd	r18, Z+22	; 0x16
    122a:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    122e:	92 17       	cp	r25, r18
    1230:	10 f4       	brcc	.+4      	; 0x1236 <xTaskIncrementTick+0x15c>
    1232:	20 93 75 06 	sts	0x0675, r18	; 0x800675 <uxTopReadyPriority>
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	d9 01       	movw	r26, r18
    123a:	aa 0f       	add	r26, r26
    123c:	bb 1f       	adc	r27, r27
    123e:	aa 0f       	add	r26, r26
    1240:	bb 1f       	adc	r27, r27
    1242:	aa 0f       	add	r26, r26
    1244:	bb 1f       	adc	r27, r27
    1246:	2a 0f       	add	r18, r26
    1248:	3b 1f       	adc	r19, r27
    124a:	d9 01       	movw	r26, r18
    124c:	ae 55       	subi	r26, 0x5E	; 94
    124e:	b9 4f       	sbci	r27, 0xF9	; 249
    1250:	11 96       	adiw	r26, 0x01	; 1
    1252:	0d 90       	ld	r0, X+
    1254:	bc 91       	ld	r27, X
    1256:	a0 2d       	mov	r26, r0
    1258:	b5 83       	std	Z+5, r27	; 0x05
    125a:	a4 83       	std	Z+4, r26	; 0x04
    125c:	14 96       	adiw	r26, 0x04	; 4
    125e:	2d 91       	ld	r18, X+
    1260:	3c 91       	ld	r19, X
    1262:	15 97       	sbiw	r26, 0x05	; 5
    1264:	37 83       	std	Z+7, r19	; 0x07
    1266:	26 83       	std	Z+6, r18	; 0x06
    1268:	14 96       	adiw	r26, 0x04	; 4
    126a:	2d 91       	ld	r18, X+
    126c:	3c 91       	ld	r19, X
    126e:	15 97       	sbiw	r26, 0x05	; 5
    1270:	e9 01       	movw	r28, r18
    1272:	5b 83       	std	Y+3, r21	; 0x03
    1274:	4a 83       	std	Y+2, r20	; 0x02
    1276:	15 96       	adiw	r26, 0x05	; 5
    1278:	5c 93       	st	X, r21
    127a:	4e 93       	st	-X, r20
    127c:	14 97       	sbiw	r26, 0x04	; 4
    127e:	a6 89       	ldd	r26, Z+22	; 0x16
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	9d 01       	movw	r18, r26
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	a2 0f       	add	r26, r18
    1292:	b3 1f       	adc	r27, r19
    1294:	ae 55       	subi	r26, 0x5E	; 94
    1296:	b9 4f       	sbci	r27, 0xF9	; 249
    1298:	b3 87       	std	Z+11, r27	; 0x0b
    129a:	a2 87       	std	Z+10, r26	; 0x0a
    129c:	9c 91       	ld	r25, X
    129e:	9f 5f       	subi	r25, 0xFF	; 255
    12a0:	9c 93       	st	X, r25
    12a2:	26 89       	ldd	r18, Z+22	; 0x16
    12a4:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    12a8:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    12ac:	96 89       	ldd	r25, Z+22	; 0x16
    12ae:	29 17       	cp	r18, r25
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <xTaskIncrementTick+0x1da>
    12b2:	49 cf       	rjmp	.-366    	; 0x1146 <xTaskIncrementTick+0x6c>
    12b4:	4b cf       	rjmp	.-362    	; 0x114c <xTaskIncrementTick+0x72>
    12b6:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    12ba:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    12be:	26 89       	ldd	r18, Z+22	; 0x16
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	2e 0f       	add	r18, r30
    12d2:	3f 1f       	adc	r19, r31
    12d4:	f9 01       	movw	r30, r18
    12d6:	ee 55       	subi	r30, 0x5E	; 94
    12d8:	f9 4f       	sbci	r31, 0xF9	; 249
    12da:	90 81       	ld	r25, Z
    12dc:	92 30       	cpi	r25, 0x02	; 2
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <xTaskIncrementTick+0x208>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <xYieldPending>
    12e6:	91 11       	cpse	r25, r1
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <xTaskIncrementTick+0x228>
    12ea:	0c c0       	rjmp	.+24     	; 0x1304 <xTaskIncrementTick+0x22a>
    12ec:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xPendedTicks>
    12f0:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <xPendedTicks+0x1>
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xPendedTicks+0x1>
    12fa:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xPendedTicks>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <xTaskIncrementTick+0x22a>
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <xTaskResumeAll>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	0f 92       	push	r0
    1318:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    131c:	81 50       	subi	r24, 0x01	; 1
    131e:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxSchedulerSuspended>
    1322:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    1326:	81 11       	cpse	r24, r1
    1328:	bf c0       	rjmp	.+382    	; 0x14a8 <xTaskResumeAll+0x19a>
    132a:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxCurrentNumberOfTasks>
    132e:	81 11       	cpse	r24, r1
    1330:	96 c0       	rjmp	.+300    	; 0x145e <xTaskResumeAll+0x150>
    1332:	bd c0       	rjmp	.+378    	; 0x14ae <xTaskResumeAll+0x1a0>
    1334:	e0 91 88 06 	lds	r30, 0x0688	; 0x800688 <xPendingReadyList+0x5>
    1338:	f0 91 89 06 	lds	r31, 0x0689	; 0x800689 <xPendingReadyList+0x6>
    133c:	06 80       	ldd	r0, Z+6	; 0x06
    133e:	f7 81       	ldd	r31, Z+7	; 0x07
    1340:	e0 2d       	mov	r30, r0
    1342:	a4 89       	ldd	r26, Z+20	; 0x14
    1344:	b5 89       	ldd	r27, Z+21	; 0x15
    1346:	c6 85       	ldd	r28, Z+14	; 0x0e
    1348:	d7 85       	ldd	r29, Z+15	; 0x0f
    134a:	80 89       	ldd	r24, Z+16	; 0x10
    134c:	91 89       	ldd	r25, Z+17	; 0x11
    134e:	9d 83       	std	Y+5, r25	; 0x05
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	c0 89       	ldd	r28, Z+16	; 0x10
    1354:	d1 89       	ldd	r29, Z+17	; 0x11
    1356:	86 85       	ldd	r24, Z+14	; 0x0e
    1358:	97 85       	ldd	r25, Z+15	; 0x0f
    135a:	9b 83       	std	Y+3, r25	; 0x03
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	2d 91       	ld	r18, X+
    1362:	3c 91       	ld	r19, X
    1364:	12 97       	sbiw	r26, 0x02	; 2
    1366:	cf 01       	movw	r24, r30
    1368:	0c 96       	adiw	r24, 0x0c	; 12
    136a:	28 17       	cp	r18, r24
    136c:	39 07       	cpc	r19, r25
    136e:	31 f4       	brne	.+12     	; 0x137c <xTaskResumeAll+0x6e>
    1370:	80 89       	ldd	r24, Z+16	; 0x10
    1372:	91 89       	ldd	r25, Z+17	; 0x11
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	9c 93       	st	X, r25
    1378:	8e 93       	st	-X, r24
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	15 8a       	std	Z+21, r1	; 0x15
    137e:	14 8a       	std	Z+20, r1	; 0x14
    1380:	8c 91       	ld	r24, X
    1382:	81 50       	subi	r24, 0x01	; 1
    1384:	8c 93       	st	X, r24
    1386:	a2 85       	ldd	r26, Z+10	; 0x0a
    1388:	b3 85       	ldd	r27, Z+11	; 0x0b
    138a:	c4 81       	ldd	r28, Z+4	; 0x04
    138c:	d5 81       	ldd	r29, Z+5	; 0x05
    138e:	86 81       	ldd	r24, Z+6	; 0x06
    1390:	97 81       	ldd	r25, Z+7	; 0x07
    1392:	9d 83       	std	Y+5, r25	; 0x05
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	c6 81       	ldd	r28, Z+6	; 0x06
    1398:	d7 81       	ldd	r29, Z+7	; 0x07
    139a:	84 81       	ldd	r24, Z+4	; 0x04
    139c:	95 81       	ldd	r25, Z+5	; 0x05
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	8d 91       	ld	r24, X+
    13a6:	9c 91       	ld	r25, X
    13a8:	12 97       	sbiw	r26, 0x02	; 2
    13aa:	9f 01       	movw	r18, r30
    13ac:	2e 5f       	subi	r18, 0xFE	; 254
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	82 17       	cp	r24, r18
    13b2:	93 07       	cpc	r25, r19
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <xTaskResumeAll+0xb4>
    13b6:	86 81       	ldd	r24, Z+6	; 0x06
    13b8:	97 81       	ldd	r25, Z+7	; 0x07
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	9c 93       	st	X, r25
    13be:	8e 93       	st	-X, r24
    13c0:	11 97       	sbiw	r26, 0x01	; 1
    13c2:	13 86       	std	Z+11, r1	; 0x0b
    13c4:	12 86       	std	Z+10, r1	; 0x0a
    13c6:	8c 91       	ld	r24, X
    13c8:	81 50       	subi	r24, 0x01	; 1
    13ca:	8c 93       	st	X, r24
    13cc:	86 89       	ldd	r24, Z+22	; 0x16
    13ce:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    13d2:	98 17       	cp	r25, r24
    13d4:	10 f4       	brcc	.+4      	; 0x13da <xTaskResumeAll+0xcc>
    13d6:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	dc 01       	movw	r26, r24
    13de:	aa 0f       	add	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	aa 0f       	add	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	aa 0f       	add	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	8a 0f       	add	r24, r26
    13ec:	9b 1f       	adc	r25, r27
    13ee:	dc 01       	movw	r26, r24
    13f0:	ae 55       	subi	r26, 0x5E	; 94
    13f2:	b9 4f       	sbci	r27, 0xF9	; 249
    13f4:	11 96       	adiw	r26, 0x01	; 1
    13f6:	0d 90       	ld	r0, X+
    13f8:	bc 91       	ld	r27, X
    13fa:	a0 2d       	mov	r26, r0
    13fc:	b5 83       	std	Z+5, r27	; 0x05
    13fe:	a4 83       	std	Z+4, r26	; 0x04
    1400:	14 96       	adiw	r26, 0x04	; 4
    1402:	8d 91       	ld	r24, X+
    1404:	9c 91       	ld	r25, X
    1406:	15 97       	sbiw	r26, 0x05	; 5
    1408:	97 83       	std	Z+7, r25	; 0x07
    140a:	86 83       	std	Z+6, r24	; 0x06
    140c:	14 96       	adiw	r26, 0x04	; 4
    140e:	cd 91       	ld	r28, X+
    1410:	dc 91       	ld	r29, X
    1412:	15 97       	sbiw	r26, 0x05	; 5
    1414:	3b 83       	std	Y+3, r19	; 0x03
    1416:	2a 83       	std	Y+2, r18	; 0x02
    1418:	15 96       	adiw	r26, 0x05	; 5
    141a:	3c 93       	st	X, r19
    141c:	2e 93       	st	-X, r18
    141e:	14 97       	sbiw	r26, 0x04	; 4
    1420:	a6 89       	ldd	r26, Z+22	; 0x16
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	cd 01       	movw	r24, r26
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	a8 0f       	add	r26, r24
    1434:	b9 1f       	adc	r27, r25
    1436:	ae 55       	subi	r26, 0x5E	; 94
    1438:	b9 4f       	sbci	r27, 0xF9	; 249
    143a:	b3 87       	std	Z+11, r27	; 0x0b
    143c:	a2 87       	std	Z+10, r26	; 0x0a
    143e:	8c 91       	ld	r24, X
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	8c 93       	st	X, r24
    1444:	96 89       	ldd	r25, Z+22	; 0x16
    1446:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    144a:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    144e:	56 96       	adiw	r26, 0x16	; 22
    1450:	8c 91       	ld	r24, X
    1452:	98 17       	cp	r25, r24
    1454:	30 f0       	brcs	.+12     	; 0x1462 <xTaskResumeAll+0x154>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <xTaskResumeAll+0x154>
    145e:	e0 e0       	ldi	r30, 0x00	; 0
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <xPendingReadyList>
    1466:	81 11       	cpse	r24, r1
    1468:	65 cf       	rjmp	.-310    	; 0x1334 <xTaskResumeAll+0x26>
    146a:	ef 2b       	or	r30, r31
    146c:	11 f0       	breq	.+4      	; 0x1472 <xTaskResumeAll+0x164>
    146e:	0e 94 1b 06 	call	0xc36	; 0xc36 <prvResetNextTaskUnblockTime>
    1472:	c0 91 72 06 	lds	r28, 0x0672	; 0x800672 <xPendedTicks>
    1476:	d0 91 73 06 	lds	r29, 0x0673	; 0x800673 <xPendedTicks+0x1>
    147a:	20 97       	sbiw	r28, 0x00	; 0
    147c:	69 f0       	breq	.+26     	; 0x1498 <xTaskResumeAll+0x18a>
    147e:	0e 94 6d 08 	call	0x10da	; 0x10da <xTaskIncrementTick>
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <xTaskResumeAll+0x17e>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    148c:	21 97       	sbiw	r28, 0x01	; 1
    148e:	b9 f7       	brne	.-18     	; 0x147e <xTaskResumeAll+0x170>
    1490:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <xPendedTicks+0x1>
    1494:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <xPendedTicks>
    1498:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xYieldPending>
    149c:	88 23       	and	r24, r24
    149e:	31 f0       	breq	.+12     	; 0x14ac <xTaskResumeAll+0x19e>
    14a0:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <xTaskResumeAll+0x1a0>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <xTaskResumeAll+0x1a0>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <vTaskDelay>:
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
    14be:	89 2b       	or	r24, r25
    14c0:	49 f0       	breq	.+18     	; 0x14d4 <vTaskDelay+0x1c>
    14c2:	0e 94 67 08 	call	0x10ce	; 0x10ce <vTaskSuspendAll>
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	ce 01       	movw	r24, r28
    14ca:	0e 94 a3 07 	call	0xf46	; 0xf46 <prvAddCurrentTaskToDelayedList>
    14ce:	0e 94 87 09 	call	0x130e	; 0x130e <xTaskResumeAll>
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <vTaskDelay+0x1e>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	81 11       	cpse	r24, r1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vTaskDelay+0x26>
    14da:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <vTaskSwitchContext>:
    14e4:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    14e8:	88 23       	and	r24, r24
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <vTaskSwitchContext+0x10>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    14f2:	08 95       	ret
    14f4:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <xYieldPending>
    14f8:	20 91 75 06 	lds	r18, 0x0675	; 0x800675 <uxTopReadyPriority>
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <vTaskSwitchContext+0x1c>
    14fe:	21 50       	subi	r18, 0x01	; 1
    1500:	82 2f       	mov	r24, r18
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	fc 01       	movw	r30, r24
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	e8 0f       	add	r30, r24
    1514:	f9 1f       	adc	r31, r25
    1516:	ee 55       	subi	r30, 0x5E	; 94
    1518:	f9 4f       	sbci	r31, 0xF9	; 249
    151a:	30 81       	ld	r19, Z
    151c:	33 23       	and	r19, r19
    151e:	79 f3       	breq	.-34     	; 0x14fe <vTaskSwitchContext+0x1a>
    1520:	ac 01       	movw	r20, r24
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	44 0f       	add	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	48 0f       	add	r20, r24
    1530:	59 1f       	adc	r21, r25
    1532:	df 01       	movw	r26, r30
    1534:	01 80       	ldd	r0, Z+1	; 0x01
    1536:	f2 81       	ldd	r31, Z+2	; 0x02
    1538:	e0 2d       	mov	r30, r0
    153a:	02 80       	ldd	r0, Z+2	; 0x02
    153c:	f3 81       	ldd	r31, Z+3	; 0x03
    153e:	e0 2d       	mov	r30, r0
    1540:	12 96       	adiw	r26, 0x02	; 2
    1542:	fc 93       	st	X, r31
    1544:	ee 93       	st	-X, r30
    1546:	11 97       	sbiw	r26, 0x01	; 1
    1548:	4b 55       	subi	r20, 0x5B	; 91
    154a:	59 4f       	sbci	r21, 0xF9	; 249
    154c:	e4 17       	cp	r30, r20
    154e:	f5 07       	cpc	r31, r21
    1550:	29 f4       	brne	.+10     	; 0x155c <vTaskSwitchContext+0x78>
    1552:	42 81       	ldd	r20, Z+2	; 0x02
    1554:	53 81       	ldd	r21, Z+3	; 0x03
    1556:	fd 01       	movw	r30, r26
    1558:	52 83       	std	Z+2, r21	; 0x02
    155a:	41 83       	std	Z+1, r20	; 0x01
    155c:	fc 01       	movw	r30, r24
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	8e 0f       	add	r24, r30
    156c:	9f 1f       	adc	r25, r31
    156e:	fc 01       	movw	r30, r24
    1570:	ee 55       	subi	r30, 0x5E	; 94
    1572:	f9 4f       	sbci	r31, 0xF9	; 249
    1574:	01 80       	ldd	r0, Z+1	; 0x01
    1576:	f2 81       	ldd	r31, Z+2	; 0x02
    1578:	e0 2d       	mov	r30, r0
    157a:	86 81       	ldd	r24, Z+6	; 0x06
    157c:	97 81       	ldd	r25, Z+7	; 0x07
    157e:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <pxCurrentTCB+0x1>
    1582:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <pxCurrentTCB>
    1586:	20 93 75 06 	sts	0x0675, r18	; 0x800675 <uxTopReadyPriority>
    158a:	08 95       	ret

0000158c <vTaskPlaceOnEventList>:
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	eb 01       	movw	r28, r22
    1592:	60 91 c6 06 	lds	r22, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1596:	70 91 c7 06 	lds	r23, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    159a:	64 5f       	subi	r22, 0xF4	; 244
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsert>
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	ce 01       	movw	r24, r28
    15a6:	0e 94 a3 07 	call	0xf46	; 0xf46 <prvAddCurrentTaskToDelayedList>
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <xTaskRemoveFromEventList>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	dc 01       	movw	r26, r24
    15b6:	15 96       	adiw	r26, 0x05	; 5
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	16 97       	sbiw	r26, 0x06	; 6
    15be:	06 80       	ldd	r0, Z+6	; 0x06
    15c0:	f7 81       	ldd	r31, Z+7	; 0x07
    15c2:	e0 2d       	mov	r30, r0
    15c4:	a4 89       	ldd	r26, Z+20	; 0x14
    15c6:	b5 89       	ldd	r27, Z+21	; 0x15
    15c8:	c6 85       	ldd	r28, Z+14	; 0x0e
    15ca:	d7 85       	ldd	r29, Z+15	; 0x0f
    15cc:	80 89       	ldd	r24, Z+16	; 0x10
    15ce:	91 89       	ldd	r25, Z+17	; 0x11
    15d0:	9d 83       	std	Y+5, r25	; 0x05
    15d2:	8c 83       	std	Y+4, r24	; 0x04
    15d4:	c0 89       	ldd	r28, Z+16	; 0x10
    15d6:	d1 89       	ldd	r29, Z+17	; 0x11
    15d8:	86 85       	ldd	r24, Z+14	; 0x0e
    15da:	97 85       	ldd	r25, Z+15	; 0x0f
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	8d 91       	ld	r24, X+
    15e4:	9c 91       	ld	r25, X
    15e6:	12 97       	sbiw	r26, 0x02	; 2
    15e8:	9f 01       	movw	r18, r30
    15ea:	24 5f       	subi	r18, 0xF4	; 244
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	82 17       	cp	r24, r18
    15f0:	93 07       	cpc	r25, r19
    15f2:	31 f4       	brne	.+12     	; 0x1600 <xTaskRemoveFromEventList+0x50>
    15f4:	80 89       	ldd	r24, Z+16	; 0x10
    15f6:	91 89       	ldd	r25, Z+17	; 0x11
    15f8:	12 96       	adiw	r26, 0x02	; 2
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	11 97       	sbiw	r26, 0x01	; 1
    1600:	15 8a       	std	Z+21, r1	; 0x15
    1602:	14 8a       	std	Z+20, r1	; 0x14
    1604:	8c 91       	ld	r24, X
    1606:	81 50       	subi	r24, 0x01	; 1
    1608:	8c 93       	st	X, r24
    160a:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxSchedulerSuspended>
    160e:	81 11       	cpse	r24, r1
    1610:	60 c0       	rjmp	.+192    	; 0x16d2 <xTaskRemoveFromEventList+0x122>
    1612:	a2 85       	ldd	r26, Z+10	; 0x0a
    1614:	b3 85       	ldd	r27, Z+11	; 0x0b
    1616:	c4 81       	ldd	r28, Z+4	; 0x04
    1618:	d5 81       	ldd	r29, Z+5	; 0x05
    161a:	86 81       	ldd	r24, Z+6	; 0x06
    161c:	97 81       	ldd	r25, Z+7	; 0x07
    161e:	9d 83       	std	Y+5, r25	; 0x05
    1620:	8c 83       	std	Y+4, r24	; 0x04
    1622:	c6 81       	ldd	r28, Z+6	; 0x06
    1624:	d7 81       	ldd	r29, Z+7	; 0x07
    1626:	84 81       	ldd	r24, Z+4	; 0x04
    1628:	95 81       	ldd	r25, Z+5	; 0x05
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	11 96       	adiw	r26, 0x01	; 1
    1630:	8d 91       	ld	r24, X+
    1632:	9c 91       	ld	r25, X
    1634:	12 97       	sbiw	r26, 0x02	; 2
    1636:	9f 01       	movw	r18, r30
    1638:	2e 5f       	subi	r18, 0xFE	; 254
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	31 f4       	brne	.+12     	; 0x164e <xTaskRemoveFromEventList+0x9e>
    1642:	86 81       	ldd	r24, Z+6	; 0x06
    1644:	97 81       	ldd	r25, Z+7	; 0x07
    1646:	12 96       	adiw	r26, 0x02	; 2
    1648:	9c 93       	st	X, r25
    164a:	8e 93       	st	-X, r24
    164c:	11 97       	sbiw	r26, 0x01	; 1
    164e:	13 86       	std	Z+11, r1	; 0x0b
    1650:	12 86       	std	Z+10, r1	; 0x0a
    1652:	8c 91       	ld	r24, X
    1654:	81 50       	subi	r24, 0x01	; 1
    1656:	8c 93       	st	X, r24
    1658:	86 89       	ldd	r24, Z+22	; 0x16
    165a:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    165e:	98 17       	cp	r25, r24
    1660:	10 f4       	brcc	.+4      	; 0x1666 <xTaskRemoveFromEventList+0xb6>
    1662:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	dc 01       	movw	r26, r24
    166a:	aa 0f       	add	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	aa 0f       	add	r26, r26
    1670:	bb 1f       	adc	r27, r27
    1672:	aa 0f       	add	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	8a 0f       	add	r24, r26
    1678:	9b 1f       	adc	r25, r27
    167a:	dc 01       	movw	r26, r24
    167c:	ae 55       	subi	r26, 0x5E	; 94
    167e:	b9 4f       	sbci	r27, 0xF9	; 249
    1680:	11 96       	adiw	r26, 0x01	; 1
    1682:	0d 90       	ld	r0, X+
    1684:	bc 91       	ld	r27, X
    1686:	a0 2d       	mov	r26, r0
    1688:	b5 83       	std	Z+5, r27	; 0x05
    168a:	a4 83       	std	Z+4, r26	; 0x04
    168c:	14 96       	adiw	r26, 0x04	; 4
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	15 97       	sbiw	r26, 0x05	; 5
    1694:	97 83       	std	Z+7, r25	; 0x07
    1696:	86 83       	std	Z+6, r24	; 0x06
    1698:	14 96       	adiw	r26, 0x04	; 4
    169a:	cd 91       	ld	r28, X+
    169c:	dc 91       	ld	r29, X
    169e:	15 97       	sbiw	r26, 0x05	; 5
    16a0:	3b 83       	std	Y+3, r19	; 0x03
    16a2:	2a 83       	std	Y+2, r18	; 0x02
    16a4:	15 96       	adiw	r26, 0x05	; 5
    16a6:	3c 93       	st	X, r19
    16a8:	2e 93       	st	-X, r18
    16aa:	14 97       	sbiw	r26, 0x04	; 4
    16ac:	a6 89       	ldd	r26, Z+22	; 0x16
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	cd 01       	movw	r24, r26
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	a8 0f       	add	r26, r24
    16c0:	b9 1f       	adc	r27, r25
    16c2:	ae 55       	subi	r26, 0x5E	; 94
    16c4:	b9 4f       	sbci	r27, 0xF9	; 249
    16c6:	b3 87       	std	Z+11, r27	; 0x0b
    16c8:	a2 87       	std	Z+10, r26	; 0x0a
    16ca:	8c 91       	ld	r24, X
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	8c 93       	st	X, r24
    16d0:	1c c0       	rjmp	.+56     	; 0x170a <xTaskRemoveFromEventList+0x15a>
    16d2:	43 e8       	ldi	r20, 0x83	; 131
    16d4:	56 e0       	ldi	r21, 0x06	; 6
    16d6:	da 01       	movw	r26, r20
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	cd 91       	ld	r28, X+
    16dc:	dc 91       	ld	r29, X
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	d7 87       	std	Z+15, r29	; 0x0f
    16e2:	c6 87       	std	Z+14, r28	; 0x0e
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	91 8b       	std	Z+17, r25	; 0x11
    16ea:	80 8b       	std	Z+16, r24	; 0x10
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	dc 01       	movw	r26, r24
    16f2:	13 96       	adiw	r26, 0x03	; 3
    16f4:	3c 93       	st	X, r19
    16f6:	2e 93       	st	-X, r18
    16f8:	12 97       	sbiw	r26, 0x02	; 2
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	55 8b       	std	Z+21, r21	; 0x15
    1700:	44 8b       	std	Z+20, r20	; 0x14
    1702:	da 01       	movw	r26, r20
    1704:	8c 91       	ld	r24, X
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	8c 93       	st	X, r24
    170a:	96 89       	ldd	r25, Z+22	; 0x16
    170c:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1710:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    1714:	86 89       	ldd	r24, Z+22	; 0x16
    1716:	89 17       	cp	r24, r25
    1718:	20 f4       	brcc	.+8      	; 0x1722 <xTaskRemoveFromEventList+0x172>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <xTaskRemoveFromEventList+0x174>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <vTaskInternalSetTimeOutState>:
    172a:	20 91 70 06 	lds	r18, 0x0670	; 0x800670 <xNumOfOverflows>
    172e:	fc 01       	movw	r30, r24
    1730:	20 83       	st	Z, r18
    1732:	20 91 76 06 	lds	r18, 0x0676	; 0x800676 <xTickCount>
    1736:	30 91 77 06 	lds	r19, 0x0677	; 0x800677 <xTickCount+0x1>
    173a:	32 83       	std	Z+2, r19	; 0x02
    173c:	21 83       	std	Z+1, r18	; 0x01
    173e:	08 95       	ret

00001740 <xTaskCheckForTimeOut>:
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	0f 92       	push	r0
    174a:	40 91 76 06 	lds	r20, 0x0676	; 0x800676 <xTickCount>
    174e:	50 91 77 06 	lds	r21, 0x0677	; 0x800677 <xTickCount+0x1>
    1752:	ec 01       	movw	r28, r24
    1754:	29 81       	ldd	r18, Y+1	; 0x01
    1756:	3a 81       	ldd	r19, Y+2	; 0x02
    1758:	da 01       	movw	r26, r20
    175a:	a2 1b       	sub	r26, r18
    175c:	b3 0b       	sbc	r27, r19
    175e:	f8 81       	ld	r31, Y
    1760:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <xNumOfOverflows>
    1764:	fe 17       	cp	r31, r30
    1766:	41 f0       	breq	.+16     	; 0x1778 <xTaskCheckForTimeOut+0x38>
    1768:	42 17       	cp	r20, r18
    176a:	53 07       	cpc	r21, r19
    176c:	28 f0       	brcs	.+10     	; 0x1778 <xTaskCheckForTimeOut+0x38>
    176e:	fb 01       	movw	r30, r22
    1770:	11 82       	std	Z+1, r1	; 0x01
    1772:	10 82       	st	Z, r1
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	11 c0       	rjmp	.+34     	; 0x179a <xTaskCheckForTimeOut+0x5a>
    1778:	eb 01       	movw	r28, r22
    177a:	28 81       	ld	r18, Y
    177c:	39 81       	ldd	r19, Y+1	; 0x01
    177e:	a2 17       	cp	r26, r18
    1780:	b3 07       	cpc	r27, r19
    1782:	40 f4       	brcc	.+16     	; 0x1794 <xTaskCheckForTimeOut+0x54>
    1784:	2a 1b       	sub	r18, r26
    1786:	3b 0b       	sbc	r19, r27
    1788:	39 83       	std	Y+1, r19	; 0x01
    178a:	28 83       	st	Y, r18
    178c:	0e 94 95 0b 	call	0x172a	; 0x172a <vTaskInternalSetTimeOutState>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	03 c0       	rjmp	.+6      	; 0x179a <xTaskCheckForTimeOut+0x5a>
    1794:	19 82       	std	Y+1, r1	; 0x01
    1796:	18 82       	st	Y, r1
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <vTaskMissedYield>:
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    17aa:	08 95       	ret

000017ac <xTaskPriorityInherit>:
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	fc 01       	movw	r30, r24
    17b6:	89 2b       	or	r24, r25
    17b8:	09 f4       	brne	.+2      	; 0x17bc <xTaskPriorityInherit+0x10>
    17ba:	84 c0       	rjmp	.+264    	; 0x18c4 <xTaskPriorityInherit+0x118>
    17bc:	26 89       	ldd	r18, Z+22	; 0x16
    17be:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    17c2:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    17c6:	56 96       	adiw	r26, 0x16	; 22
    17c8:	8c 91       	ld	r24, X
    17ca:	28 17       	cp	r18, r24
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <xTaskPriorityInherit+0x24>
    17ce:	70 c0       	rjmp	.+224    	; 0x18b0 <xTaskPriorityInherit+0x104>
    17d0:	84 85       	ldd	r24, Z+12	; 0x0c
    17d2:	95 85       	ldd	r25, Z+13	; 0x0d
    17d4:	99 23       	and	r25, r25
    17d6:	64 f0       	brlt	.+24     	; 0x17f0 <xTaskPriorityInherit+0x44>
    17d8:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    17dc:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    17e0:	56 96       	adiw	r26, 0x16	; 22
    17e2:	3c 91       	ld	r19, X
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	83 1b       	sub	r24, r19
    17ea:	91 09       	sbc	r25, r1
    17ec:	95 87       	std	Z+13, r25	; 0x0d
    17ee:	84 87       	std	Z+12, r24	; 0x0c
    17f0:	82 85       	ldd	r24, Z+10	; 0x0a
    17f2:	93 85       	ldd	r25, Z+11	; 0x0b
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	44 0f       	add	r20, r20
    17fe:	55 1f       	adc	r21, r21
    1800:	44 0f       	add	r20, r20
    1802:	55 1f       	adc	r21, r21
    1804:	24 0f       	add	r18, r20
    1806:	35 1f       	adc	r19, r21
    1808:	2e 55       	subi	r18, 0x5E	; 94
    180a:	39 4f       	sbci	r19, 0xF9	; 249
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	09 f0       	breq	.+2      	; 0x1814 <xTaskPriorityInherit+0x68>
    1812:	45 c0       	rjmp	.+138    	; 0x189e <xTaskPriorityInherit+0xf2>
    1814:	ef 01       	movw	r28, r30
    1816:	8f 01       	movw	r16, r30
    1818:	0e 5f       	subi	r16, 0xFE	; 254
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	c8 01       	movw	r24, r16
    181e:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
    1822:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1826:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    182a:	86 89       	ldd	r24, Z+22	; 0x16
    182c:	8e 8b       	std	Y+22, r24	; 0x16
    182e:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    1832:	98 17       	cp	r25, r24
    1834:	10 f4       	brcc	.+4      	; 0x183a <xTaskPriorityInherit+0x8e>
    1836:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	fc 01       	movw	r30, r24
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	8e 0f       	add	r24, r30
    184c:	9f 1f       	adc	r25, r31
    184e:	fc 01       	movw	r30, r24
    1850:	ee 55       	subi	r30, 0x5E	; 94
    1852:	f9 4f       	sbci	r31, 0xF9	; 249
    1854:	01 80       	ldd	r0, Z+1	; 0x01
    1856:	f2 81       	ldd	r31, Z+2	; 0x02
    1858:	e0 2d       	mov	r30, r0
    185a:	fd 83       	std	Y+5, r31	; 0x05
    185c:	ec 83       	std	Y+4, r30	; 0x04
    185e:	84 81       	ldd	r24, Z+4	; 0x04
    1860:	95 81       	ldd	r25, Z+5	; 0x05
    1862:	9f 83       	std	Y+7, r25	; 0x07
    1864:	8e 83       	std	Y+6, r24	; 0x06
    1866:	a4 81       	ldd	r26, Z+4	; 0x04
    1868:	b5 81       	ldd	r27, Z+5	; 0x05
    186a:	13 96       	adiw	r26, 0x03	; 3
    186c:	1c 93       	st	X, r17
    186e:	0e 93       	st	-X, r16
    1870:	12 97       	sbiw	r26, 0x02	; 2
    1872:	15 83       	std	Z+5, r17	; 0x05
    1874:	04 83       	std	Z+4, r16	; 0x04
    1876:	8e 89       	ldd	r24, Y+22	; 0x16
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	fc 01       	movw	r30, r24
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	e8 0f       	add	r30, r24
    188a:	f9 1f       	adc	r31, r25
    188c:	ee 55       	subi	r30, 0x5E	; 94
    188e:	f9 4f       	sbci	r31, 0xF9	; 249
    1890:	fb 87       	std	Y+11, r31	; 0x0b
    1892:	ea 87       	std	Y+10, r30	; 0x0a
    1894:	80 81       	ld	r24, Z
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	80 83       	st	Z, r24
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	16 c0       	rjmp	.+44     	; 0x18ca <xTaskPriorityInherit+0x11e>
    189e:	a0 91 c6 06 	lds	r26, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    18a2:	b0 91 c7 06 	lds	r27, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    18a6:	56 96       	adiw	r26, 0x16	; 22
    18a8:	8c 91       	ld	r24, X
    18aa:	86 8b       	std	Z+22, r24	; 0x16
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <xTaskPriorityInherit+0x11e>
    18b0:	91 a1       	ldd	r25, Z+33	; 0x21
    18b2:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    18b6:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    18ba:	86 89       	ldd	r24, Z+22	; 0x16
    18bc:	98 17       	cp	r25, r24
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <xTaskPriorityInherit+0x11c>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <xTaskPriorityInherit+0x11e>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <xTaskPriorityInherit+0x11e>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <xTaskPriorityDisinherit>:
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	fc 01       	movw	r30, r24
    18de:	89 2b       	or	r24, r25
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <xTaskPriorityDisinherit+0x10>
    18e2:	51 c0       	rjmp	.+162    	; 0x1986 <xTaskPriorityDisinherit+0xb2>
    18e4:	82 a1       	ldd	r24, Z+34	; 0x22
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	82 a3       	std	Z+34, r24	; 0x22
    18ea:	26 89       	ldd	r18, Z+22	; 0x16
    18ec:	91 a1       	ldd	r25, Z+33	; 0x21
    18ee:	29 17       	cp	r18, r25
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <xTaskPriorityDisinherit+0x20>
    18f2:	4b c0       	rjmp	.+150    	; 0x198a <xTaskPriorityDisinherit+0xb6>
    18f4:	81 11       	cpse	r24, r1
    18f6:	4b c0       	rjmp	.+150    	; 0x198e <xTaskPriorityDisinherit+0xba>
    18f8:	ef 01       	movw	r28, r30
    18fa:	8f 01       	movw	r16, r30
    18fc:	0e 5f       	subi	r16, 0xFE	; 254
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	c8 01       	movw	r24, r16
    1902:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
    1906:	89 a1       	ldd	r24, Y+33	; 0x21
    1908:	8e 8b       	std	Y+22, r24	; 0x16
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	28 1b       	sub	r18, r24
    1910:	31 09       	sbc	r19, r1
    1912:	3d 87       	std	Y+13, r19	; 0x0d
    1914:	2c 87       	std	Y+12, r18	; 0x0c
    1916:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    191a:	98 17       	cp	r25, r24
    191c:	10 f4       	brcc	.+4      	; 0x1922 <xTaskPriorityDisinherit+0x4e>
    191e:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	8e 0f       	add	r24, r30
    1934:	9f 1f       	adc	r25, r31
    1936:	fc 01       	movw	r30, r24
    1938:	ee 55       	subi	r30, 0x5E	; 94
    193a:	f9 4f       	sbci	r31, 0xF9	; 249
    193c:	01 80       	ldd	r0, Z+1	; 0x01
    193e:	f2 81       	ldd	r31, Z+2	; 0x02
    1940:	e0 2d       	mov	r30, r0
    1942:	fd 83       	std	Y+5, r31	; 0x05
    1944:	ec 83       	std	Y+4, r30	; 0x04
    1946:	84 81       	ldd	r24, Z+4	; 0x04
    1948:	95 81       	ldd	r25, Z+5	; 0x05
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	a4 81       	ldd	r26, Z+4	; 0x04
    1950:	b5 81       	ldd	r27, Z+5	; 0x05
    1952:	13 96       	adiw	r26, 0x03	; 3
    1954:	1c 93       	st	X, r17
    1956:	0e 93       	st	-X, r16
    1958:	12 97       	sbiw	r26, 0x02	; 2
    195a:	15 83       	std	Z+5, r17	; 0x05
    195c:	04 83       	std	Z+4, r16	; 0x04
    195e:	ee 89       	ldd	r30, Y+22	; 0x16
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	cf 01       	movw	r24, r30
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	e8 0f       	add	r30, r24
    1972:	f9 1f       	adc	r31, r25
    1974:	ee 55       	subi	r30, 0x5E	; 94
    1976:	f9 4f       	sbci	r31, 0xF9	; 249
    1978:	fb 87       	std	Y+11, r31	; 0x0b
    197a:	ea 87       	std	Y+10, r30	; 0x0a
    197c:	80 81       	ld	r24, Z
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 83       	st	Z, r24
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <xTaskPriorityDisinherit+0xbc>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <xTaskPriorityDisinherit+0xbc>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <xTaskPriorityDisinherit+0xbc>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <vTaskPriorityDisinheritAfterTimeout>:
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	fc 01       	movw	r30, r24
    19a4:	89 2b       	or	r24, r25
    19a6:	09 f4       	brne	.+2      	; 0x19aa <vTaskPriorityDisinheritAfterTimeout+0x10>
    19a8:	66 c0       	rjmp	.+204    	; 0x1a76 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19aa:	91 a1       	ldd	r25, Z+33	; 0x21
    19ac:	96 17       	cp	r25, r22
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <vTaskPriorityDisinheritAfterTimeout+0x18>
    19b0:	96 2f       	mov	r25, r22
    19b2:	86 89       	ldd	r24, Z+22	; 0x16
    19b4:	98 17       	cp	r25, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <vTaskPriorityDisinheritAfterTimeout+0x20>
    19b8:	5e c0       	rjmp	.+188    	; 0x1a76 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19ba:	22 a1       	ldd	r18, Z+34	; 0x22
    19bc:	21 30       	cpi	r18, 0x01	; 1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <vTaskPriorityDisinheritAfterTimeout+0x28>
    19c0:	5a c0       	rjmp	.+180    	; 0x1a76 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19c2:	96 8b       	std	Z+22, r25	; 0x16
    19c4:	24 85       	ldd	r18, Z+12	; 0x0c
    19c6:	35 85       	ldd	r19, Z+13	; 0x0d
    19c8:	33 23       	and	r19, r19
    19ca:	34 f0       	brlt	.+12     	; 0x19d8 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    19cc:	24 e0       	ldi	r18, 0x04	; 4
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	29 1b       	sub	r18, r25
    19d2:	31 09       	sbc	r19, r1
    19d4:	35 87       	std	Z+13, r19	; 0x0d
    19d6:	24 87       	std	Z+12, r18	; 0x0c
    19d8:	22 85       	ldd	r18, Z+10	; 0x0a
    19da:	33 85       	ldd	r19, Z+11	; 0x0b
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	ac 01       	movw	r20, r24
    19e0:	44 0f       	add	r20, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	44 0f       	add	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	44 0f       	add	r20, r20
    19ea:	55 1f       	adc	r21, r21
    19ec:	84 0f       	add	r24, r20
    19ee:	95 1f       	adc	r25, r21
    19f0:	8e 55       	subi	r24, 0x5E	; 94
    19f2:	99 4f       	sbci	r25, 0xF9	; 249
    19f4:	28 17       	cp	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	f1 f5       	brne	.+124    	; 0x1a76 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    19fa:	ef 01       	movw	r28, r30
    19fc:	8f 01       	movw	r16, r30
    19fe:	0e 5f       	subi	r16, 0xFE	; 254
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
    1a08:	8e 89       	ldd	r24, Y+22	; 0x16
    1a0a:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <uxTopReadyPriority>
    1a0e:	98 17       	cp	r25, r24
    1a10:	10 f4       	brcc	.+4      	; 0x1a16 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1a12:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxTopReadyPriority>
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	8e 0f       	add	r24, r30
    1a28:	9f 1f       	adc	r25, r31
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	ee 55       	subi	r30, 0x5E	; 94
    1a2e:	f9 4f       	sbci	r31, 0xF9	; 249
    1a30:	01 80       	ldd	r0, Z+1	; 0x01
    1a32:	f2 81       	ldd	r31, Z+2	; 0x02
    1a34:	e0 2d       	mov	r30, r0
    1a36:	fd 83       	std	Y+5, r31	; 0x05
    1a38:	ec 83       	std	Y+4, r30	; 0x04
    1a3a:	84 81       	ldd	r24, Z+4	; 0x04
    1a3c:	95 81       	ldd	r25, Z+5	; 0x05
    1a3e:	9f 83       	std	Y+7, r25	; 0x07
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	a4 81       	ldd	r26, Z+4	; 0x04
    1a44:	b5 81       	ldd	r27, Z+5	; 0x05
    1a46:	13 96       	adiw	r26, 0x03	; 3
    1a48:	1c 93       	st	X, r17
    1a4a:	0e 93       	st	-X, r16
    1a4c:	12 97       	sbiw	r26, 0x02	; 2
    1a4e:	15 83       	std	Z+5, r17	; 0x05
    1a50:	04 83       	std	Z+4, r16	; 0x04
    1a52:	8e 89       	ldd	r24, Y+22	; 0x16
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	fc 01       	movw	r30, r24
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	e8 0f       	add	r30, r24
    1a66:	f9 1f       	adc	r31, r25
    1a68:	ee 55       	subi	r30, 0x5E	; 94
    1a6a:	f9 4f       	sbci	r31, 0xF9	; 249
    1a6c:	fb 87       	std	Y+11, r31	; 0x0b
    1a6e:	ea 87       	std	Y+10, r30	; 0x0a
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 83       	st	Z, r24
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1a80:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1a84:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    1a88:	89 2b       	or	r24, r25
    1a8a:	39 f0       	breq	.+14     	; 0x1a9a <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1a8c:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1a90:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    1a94:	82 a1       	ldd	r24, Z+34	; 0x22
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1a9a:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <pxCurrentTCB>
    1a9e:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <pxCurrentTCB+0x1>
    }
    1aa2:	08 95       	ret

00001aa4 <Task1_Func>:
{	
	
	while(1)
	{
			/*take the semaphore*/
			xSemaphoreTake( xSemaphore, ( TickType_t ) 10) ;	
    1aa4:	6a e0       	ldi	r22, 0x0A	; 10
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xSemaphore>
    1aac:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <xSemaphore+0x1>
    1ab0:	0e 94 6a 05 	call	0xad4	; 0xad4 <xQueueSemaphoreTake>
					 
			if( PINA & (1<<PA0) )	
    1ab4:	c8 9b       	sbis	0x19, 0	; 25
    1ab6:	13 c0       	rjmp	.+38     	; 0x1ade <Task1_Func+0x3a>
			{
				vTaskDelay(10);
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <vTaskDelay>
				//second check due to switch bouncing
				if( PINA & (1<<PA0) )
    1ac0:	c8 9b       	sbis	0x19, 0	; 25
    1ac2:	22 c0       	rjmp	.+68     	; 0x1b08 <Task1_Func+0x64>
				{
					while( PINA & (1<<PA0) ){} // wait until switch is released
    1ac4:	c8 99       	sbic	0x19, 0	; 25
    1ac6:	fe cf       	rjmp	.-4      	; 0x1ac4 <Task1_Func+0x20>
						
							if(counter == 9)
    1ac8:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <counter>
    1acc:	89 30       	cpi	r24, 0x09	; 9
    1ace:	19 f4       	brne	.+6      	; 0x1ad6 <Task1_Func+0x32>
							{
								// if overflow occurs
								counter = 0;
    1ad0:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <counter>
    1ad4:	19 c0       	rjmp	.+50     	; 0x1b08 <Task1_Func+0x64>
							}
							
							else
							{
								// increment
								counter = counter + 1;
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <counter>
    1adc:	15 c0       	rjmp	.+42     	; 0x1b08 <Task1_Func+0x64>
					}

			}
		

			else if( PINA & (1<<PA1) )
    1ade:	c9 9b       	sbis	0x19, 1	; 25
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <Task1_Func+0x64>
			{
				vTaskDelay(10);
    1ae2:	8a e0       	ldi	r24, 0x0A	; 10
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <vTaskDelay>
				//second check due to switch bouncing
				if( PINA & (1<<PA1) )
    1aea:	c9 9b       	sbis	0x19, 1	; 25
    1aec:	0d c0       	rjmp	.+26     	; 0x1b08 <Task1_Func+0x64>
				{
					while( PINA & (1<<PA1) ){} // wait until switch is released
    1aee:	c9 99       	sbic	0x19, 1	; 25
    1af0:	fe cf       	rjmp	.-4      	; 0x1aee <Task1_Func+0x4a>

							if(counter == 0)
    1af2:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <counter>
    1af6:	81 11       	cpse	r24, r1
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <Task1_Func+0x5e>
							{
								// if underflow occurs
								counter = 9;
    1afa:	89 e0       	ldi	r24, 0x09	; 9
    1afc:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <counter>
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <Task1_Func+0x64>
							}
							
							else
							{
								// decrement
								counter = counter - 1;
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <counter>

			}
			
				
		/*release semaphore*/
		xSemaphoreGive( xSemaphore );	
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xSemaphore>
    1b16:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <xSemaphore+0x1>
    1b1a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <xQueueGenericSend>
		vTaskDelay(1);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <vTaskDelay>
	}
    1b26:	be cf       	rjmp	.-132    	; 0x1aa4 <Task1_Func>

00001b28 <Task2_Func>:
	unsigned char counterCopy = 0;
	
	while(1)
	{
		/*take the semaphore*/
		xSemaphoreTake( xSemaphore, ( TickType_t ) 10);
    1b28:	6a e0       	ldi	r22, 0x0A	; 10
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xSemaphore>
    1b30:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <xSemaphore+0x1>
    1b34:	0e 94 6a 05 	call	0xad4	; 0xad4 <xQueueSemaphoreTake>
        {
				/*change seven segment counter*/
            	counterCopy = counter;	
    1b38:	c0 91 c8 06 	lds	r28, 0x06C8	; 0x8006c8 <counter>
        }
		/*release the semaphore*/
		xSemaphoreGive( xSemaphore );	
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xSemaphore>
    1b4a:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <xSemaphore+0x1>
    1b4e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <xQueueGenericSend>
		
		/*Display on seven segment*/
		PORTC = ~(sevenSegHex[counterCopy]);
    1b52:	ec 2f       	mov	r30, r28
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	ed 58       	subi	r30, 0x8D	; 141
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 95       	com	r24
    1b5e:	85 bb       	out	0x15, r24	; 21
		vTaskDelay(1);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <vTaskDelay>
    1b68:	df cf       	rjmp	.-66     	; 0x1b28 <Task2_Func>

00001b6a <main>:
const unsigned char sevenSegHex[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66,0x6D, 0x7D, 0x07, 0x7F, 0x6F};

int main(void)
{	
	
	DDRA  &= ~((1 << PA0) | (1 << PA1)); // configure pin 4 in PORTD as input pin
    1b6a:	8a b3       	in	r24, 0x1a	; 26
    1b6c:	8c 7f       	andi	r24, 0xFC	; 252
    1b6e:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 0x7F; // configure first four pins of PORTC as output pins
    1b70:	84 b3       	in	r24, 0x14	; 20
    1b72:	8f 67       	ori	r24, 0x7F	; 127
    1b74:	84 bb       	out	0x14, r24	; 20
	
	// initialize the 7-segment
	PORTC |= ((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3)| (1<<PC4)| (1<<PC5)| (1<<PC6));
    1b76:	85 b3       	in	r24, 0x15	; 21
    1b78:	8f 67       	ori	r24, 0x7F	; 127
    1b7a:	85 bb       	out	0x15, r24	; 21
	
	xSemaphore =   xSemaphoreCreateBinary();
    1b7c:	43 e0       	ldi	r20, 0x03	; 3
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 97 04 	call	0x92e	; 0x92e <xQueueGenericCreate>
    1b86:	90 93 ca 06 	sts	0x06CA, r25	; 0x8006ca <xSemaphore+0x1>
    1b8a:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xSemaphore>
	
	
    xTaskCreate(Task1_Func,"first",configMINIMAL_STACK_SIZE,NULL,1,&task1ptr);		/*polling buttons task creation*/
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	fd ec       	ldi	r31, 0xCD	; 205
    1b92:	ef 2e       	mov	r14, r31
    1b94:	f6 e0       	ldi	r31, 0x06	; 6
    1b96:	ff 2e       	mov	r15, r31
    1b98:	f0 2d       	mov	r31, r0
    1b9a:	01 e0       	ldi	r16, 0x01	; 1
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	45 e5       	ldi	r20, 0x55	; 85
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	66 e6       	ldi	r22, 0x66	; 102
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	82 e5       	ldi	r24, 0x52	; 82
    1baa:	9d e0       	ldi	r25, 0x0D	; 13
    1bac:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskCreate>
    xTaskCreate(Task2_Func,"second",configMINIMAL_STACK_SIZE,NULL,1,&task2ptr);		/*display on seven segment task creation*/
    1bb0:	0f 2e       	mov	r0, r31
    1bb2:	fb ec       	ldi	r31, 0xCB	; 203
    1bb4:	ef 2e       	mov	r14, r31
    1bb6:	f6 e0       	ldi	r31, 0x06	; 6
    1bb8:	ff 2e       	mov	r15, r31
    1bba:	f0 2d       	mov	r31, r0
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	45 e5       	ldi	r20, 0x55	; 85
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	6c e6       	ldi	r22, 0x6C	; 108
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	84 e9       	ldi	r24, 0x94	; 148
    1bca:	9d e0       	ldi	r25, 0x0D	; 13
    1bcc:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskCreate>
	
	xSemaphoreGive( xSemaphore );
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xSemaphore>
    1bde:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <xSemaphore+0x1>
    1be2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <xQueueGenericSend>
	
	vTaskStartScheduler();
    1be6:	0e 94 3b 08 	call	0x1076	; 0x1076 <vTaskStartScheduler>
    1bea:	ff cf       	rjmp	.-2      	; 0x1bea <main+0x80>

00001bec <__udivmodhi4>:
    1bec:	aa 1b       	sub	r26, r26
    1bee:	bb 1b       	sub	r27, r27
    1bf0:	51 e1       	ldi	r21, 0x11	; 17
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <__udivmodhi4_ep>

00001bf4 <__udivmodhi4_loop>:
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	a6 17       	cp	r26, r22
    1bfa:	b7 07       	cpc	r27, r23
    1bfc:	10 f0       	brcs	.+4      	; 0x1c02 <__udivmodhi4_ep>
    1bfe:	a6 1b       	sub	r26, r22
    1c00:	b7 0b       	sbc	r27, r23

00001c02 <__udivmodhi4_ep>:
    1c02:	88 1f       	adc	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	5a 95       	dec	r21
    1c08:	a9 f7       	brne	.-22     	; 0x1bf4 <__udivmodhi4_loop>
    1c0a:	80 95       	com	r24
    1c0c:	90 95       	com	r25
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	08 95       	ret

00001c14 <memcpy>:
    1c14:	fb 01       	movw	r30, r22
    1c16:	dc 01       	movw	r26, r24
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <memcpy+0xa>
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	41 50       	subi	r20, 0x01	; 1
    1c20:	50 40       	sbci	r21, 0x00	; 0
    1c22:	d8 f7       	brcc	.-10     	; 0x1c1a <memcpy+0x6>
    1c24:	08 95       	ret

00001c26 <_exit>:
    1c26:	f8 94       	cli

00001c28 <__stop_program>:
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <__stop_program>
