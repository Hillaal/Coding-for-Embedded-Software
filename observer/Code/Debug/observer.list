
observer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000644  08000644  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000644  08000644  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000644  08000644  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000644  08000644  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800064c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000008  08000654  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000048  08000654  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000228e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a8  00000000  00000000  000222c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00022b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00022ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b02e  00000000  00000000  00022df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f93  00000000  00000000  0002de26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003a179  00000000  00000000  0002fdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00069f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003b4  00000000  00000000  00069f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800062c 	.word	0x0800062c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	0800062c 	.word	0x0800062c

080001d4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f003 021f 	and.w	r2, r3, #31
 80001e4:	4907      	ldr	r1, [pc, #28]	; (8000204 <NVIC_EnableIRQ+0x30>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	095b      	lsrs	r3, r3, #5
 80001ec:	2001      	movs	r0, #1
 80001ee:	fa00 f202 	lsl.w	r2, r0, r2
 80001f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100

08000208 <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <StartTimer+0x48>)
 800020e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000210:	4a0f      	ldr	r2, [pc, #60]	; (8000250 <StartTimer+0x48>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000220:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	2264      	movs	r2, #100	; 0x64
 8000228:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 800022a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022e:	2200      	movs	r2, #0
 8000230:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	b29b      	uxth	r3, r3
 8000244:	8013      	strh	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40023800 	.word	0x40023800

08000254 <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 8000258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025c:	899b      	ldrh	r3, [r3, #12]
 800025e:	b29b      	uxth	r3, r3
 8000260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	b29b      	uxth	r3, r3
 800026a:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 800026c:	201c      	movs	r0, #28
 800026e:	f7ff ffb1 	bl	80001d4 <NVIC_EnableIRQ>

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}

08000276 <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	Poll();
 800027a:	f000 f85b 	bl	8000334 <Poll>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <Handle_data>:
}



void Handle_data(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	if(temp>900.0)
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <Handle_data+0x3c>)
 800028a:	edd3 7a00 	vldr	s15, [r3]
 800028e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80002c4 <Handle_data+0x40>
 8000292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800029a:	dd06      	ble.n	80002aa <Handle_data+0x26>
	{
		GPIOA->ODR |= (1u<<5);
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <Handle_data+0x44>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <Handle_data+0x44>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOA->ODR &= ~(1u<<5);
	}
}
 80002a8:	e005      	b.n	80002b6 <Handle_data+0x32>
		GPIOA->ODR &= ~(1u<<5);
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <Handle_data+0x44>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <Handle_data+0x44>)
 80002b0:	f023 0320 	bic.w	r3, r3, #32
 80002b4:	6153      	str	r3, [r2, #20]
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	20000024 	.word	0x20000024
 80002c4:	44610000 	.word	0x44610000
 80002c8:	40020000 	.word	0x40020000

080002cc <Get_Data>:
	}
}


void Get_Data(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	data = 100.0;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <Get_Data+0x14>)
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <Get_Data+0x18>)
 80002d4:	601a      	str	r2, [r3, #0]
	notify();
 80002d6:	f000 f807 	bl	80002e8 <notify>

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000044 	.word	0x20000044
 80002e4:	42c80000 	.word	0x42c80000

080002e8 <notify>:


void notify(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	unsigned char function_ID;
	for (function_ID = 0; function_ID < MAX_NUM_CLIENTS; function_ID++){
 80002ee:	2300      	movs	r3, #0
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	e012      	b.n	800031a <notify+0x32>
		if(functions_ptr[function_ID] != NULL)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <notify+0x44>)
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d009      	beq.n	8000314 <notify+0x2c>
		{
			(*functions_ptr[function_ID])(data);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <notify+0x44>)
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <notify+0x48>)
 800030a:	edd2 7a00 	vldr	s15, [r2]
 800030e:	eeb0 0a67 	vmov.f32	s0, s15
 8000312:	4798      	blx	r3
	for (function_ID = 0; function_ID < MAX_NUM_CLIENTS; function_ID++){
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	3301      	adds	r3, #1
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	2b04      	cmp	r3, #4
 800031e:	d9e9      	bls.n	80002f4 <notify+0xc>
			/*do nothing*/
		}

	}

}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000030 	.word	0x20000030
 8000330:	20000044 	.word	0x20000044

08000334 <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	if(polling_enabled && (!counter))
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <Poll+0x3c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d005      	beq.n	800034c <Poll+0x18>
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <Poll+0x40>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <Poll+0x18>
	{
		Get_Data();
 8000348:	f7ff ffc0 	bl	80002cc <Get_Data>

	}
	counter++;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <Poll+0x40>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	4a08      	ldr	r2, [pc, #32]	; (8000374 <Poll+0x40>)
 8000354:	6013      	str	r3, [r2, #0]
	counter = counter%polling_counter;
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <Poll+0x40>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <Poll+0x44>)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000362:	fb02 f201 	mul.w	r2, r2, r1
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	4a02      	ldr	r2, [pc, #8]	; (8000374 <Poll+0x40>)
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000000 	.word	0x20000000
 8000374:	2000002c 	.word	0x2000002c
 8000378:	20000004 	.word	0x20000004

0800037c <StartPolling>:

void StartPolling(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	polling_enabled=1;
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <StartPolling+0x14>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000

08000394 <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int polling_time)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	polling_counter = polling_time/100;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <SetPollingTime+0x28>)
 80003a0:	fb82 1203 	smull	r1, r2, r2, r3
 80003a4:	1152      	asrs	r2, r2, #5
 80003a6:	17db      	asrs	r3, r3, #31
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <SetPollingTime+0x2c>)
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	51eb851f 	.word	0x51eb851f
 80003c0:	20000004 	.word	0x20000004

080003c4 <main>:
#include "poller.h"



int main(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	/*initialize pin6 portA as output*/
	RCC->AHB1ENR |=(1<<0);
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <main+0x44>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <main+0x44>)
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |=(1<<10);
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <main+0x48>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0c      	ldr	r2, [pc, #48]	; (800040c <main+0x48>)
 80003da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<11);
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <main+0x48>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <main+0x48>)
 80003e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003ea:	6013      	str	r3, [r2, #0]


	StartTimer();
 80003ec:	f7ff ff0c 	bl	8000208 <StartTimer>
	EnableInterrupt();
 80003f0:	f7ff ff30 	bl	8000254 <EnableInterrupt>
	SetPollingTime(500);
 80003f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f8:	f7ff ffcc 	bl	8000394 <SetPollingTime>
	StartPolling();
 80003fc:	f7ff ffbe 	bl	800037c <StartPolling>

	while(1)
	{
		Handle_data();
 8000400:	f7ff ff40 	bl	8000284 <Handle_data>
	{
 8000404:	e7fc      	b.n	8000400 <main+0x3c>
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800
 800040c:	40020000 	.word	0x40020000

08000410 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 8000414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000418:	8a1b      	ldrh	r3, [r3, #16]
 800041a:	b29b      	uxth	r3, r3
 800041c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	b29b      	uxth	r3, r3
 8000426:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 8000428:	f7ff ff25 	bl	8000276 <CallPollingFunction>
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <SystemInit+0x60>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <SystemInit+0x60>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <SystemInit+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <SystemInit+0x64>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <SystemInit+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x64>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <SystemInit+0x64>)
 800045c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <SystemInit+0x64>)
 8000468:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <SystemInit+0x68>)
 800046a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <SystemInit+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <SystemInit+0x64>)
 8000472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <SystemInit+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800047e:	f000 f80d 	bl	800049c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <SystemInit+0x60>)
 8000484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000488:	609a      	str	r2, [r3, #8]
#endif
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00
 8000494:	40023800 	.word	0x40023800
 8000498:	24003010 	.word	0x24003010

0800049c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	2300      	movs	r3, #0
 80004a8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004aa:	4b35      	ldr	r3, [pc, #212]	; (8000580 <SetSysClock+0xe4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a34      	ldr	r2, [pc, #208]	; (8000580 <SetSysClock+0xe4>)
 80004b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004b6:	4b32      	ldr	r3, [pc, #200]	; (8000580 <SetSysClock+0xe4>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d103      	bne.n	80004d4 <SetSysClock+0x38>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80004d2:	d1f0      	bne.n	80004b6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <SetSysClock+0xe4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d002      	beq.n	80004e6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004e0:	2301      	movs	r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	e001      	b.n	80004ea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d140      	bne.n	8000572 <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <SetSysClock+0xe4>)
 80004f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f4:	4a22      	ldr	r2, [pc, #136]	; (8000580 <SetSysClock+0xe4>)
 80004f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <SetSysClock+0xe8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a20      	ldr	r2, [pc, #128]	; (8000584 <SetSysClock+0xe8>)
 8000502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000506:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <SetSysClock+0xe4>)
 800050a:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <SetSysClock+0xe4>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <SetSysClock+0xe4>)
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <SetSysClock+0xe4>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <SetSysClock+0xe4>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a18      	ldr	r2, [pc, #96]	; (8000580 <SetSysClock+0xe4>)
 800051e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000522:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <SetSysClock+0xe4>)
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <SetSysClock+0xec>)
 8000528:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <SetSysClock+0xe4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <SetSysClock+0xe4>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000536:	bf00      	nop
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <SetSysClock+0xe4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <SetSysClock+0xf0>)
 8000546:	f240 7202 	movw	r2, #1794	; 0x702
 800054a:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <SetSysClock+0xe4>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <SetSysClock+0xe4>)
 8000552:	f023 0303 	bic.w	r3, r3, #3
 8000556:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <SetSysClock+0xe4>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <SetSysClock+0xe4>)
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000564:	bf00      	nop
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <SetSysClock+0xe4>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 030c 	and.w	r3, r3, #12
 800056e:	2b08      	cmp	r3, #8
 8000570:	d1f9      	bne.n	8000566 <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800
 8000584:	40007000 	.word	0x40007000
 8000588:	07415419 	.word	0x07415419
 800058c:	40023c00 	.word	0x40023c00

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490e      	ldr	r1, [pc, #56]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0b      	ldr	r4, [pc, #44]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ba:	f7ff ff39 	bl	8000430 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f811 	bl	80005e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff feff 	bl	80003c4 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80005d4:	0800064c 	.word	0x0800064c
  ldr r2, =_sbss
 80005d8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005dc:	20000048 	.word	0x20000048

080005e0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <__libc_init_array>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4d0d      	ldr	r5, [pc, #52]	; (800061c <__libc_init_array+0x38>)
 80005e8:	4c0d      	ldr	r4, [pc, #52]	; (8000620 <__libc_init_array+0x3c>)
 80005ea:	1b64      	subs	r4, r4, r5
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	2600      	movs	r6, #0
 80005f0:	42a6      	cmp	r6, r4
 80005f2:	d109      	bne.n	8000608 <__libc_init_array+0x24>
 80005f4:	4d0b      	ldr	r5, [pc, #44]	; (8000624 <__libc_init_array+0x40>)
 80005f6:	4c0c      	ldr	r4, [pc, #48]	; (8000628 <__libc_init_array+0x44>)
 80005f8:	f000 f818 	bl	800062c <_init>
 80005fc:	1b64      	subs	r4, r4, r5
 80005fe:	10a4      	asrs	r4, r4, #2
 8000600:	2600      	movs	r6, #0
 8000602:	42a6      	cmp	r6, r4
 8000604:	d105      	bne.n	8000612 <__libc_init_array+0x2e>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f855 3b04 	ldr.w	r3, [r5], #4
 800060c:	4798      	blx	r3
 800060e:	3601      	adds	r6, #1
 8000610:	e7ee      	b.n	80005f0 <__libc_init_array+0xc>
 8000612:	f855 3b04 	ldr.w	r3, [r5], #4
 8000616:	4798      	blx	r3
 8000618:	3601      	adds	r6, #1
 800061a:	e7f2      	b.n	8000602 <__libc_init_array+0x1e>
 800061c:	08000644 	.word	0x08000644
 8000620:	08000644 	.word	0x08000644
 8000624:	08000644 	.word	0x08000644
 8000628:	08000648 	.word	0x08000648

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
