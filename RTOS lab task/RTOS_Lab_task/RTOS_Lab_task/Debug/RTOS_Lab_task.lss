
RTOS_Lab_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000117a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000117a  0000120e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000650  0080007a  0080007a  00001228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bd3  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c71  00000000  00000000  000040d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bf2  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000798  00000000  00000000  0000693c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121c  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002731  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000aa21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 08 	call	0x1102	; 0x1102 <main>
      8a:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
      92:	fc 01       	movw	r30, r24
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      bc:	48 81       	ld	r20, Y
      be:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
      c0:	4f 3f       	cpi	r20, 0xFF	; 255
      c2:	2f ef       	ldi	r18, 0xFF	; 255
      c4:	52 07       	cpc	r21, r18
      c6:	21 f4       	brne	.+8      	; 0xd0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
      c8:	fc 01       	movw	r30, r24
      ca:	a7 81       	ldd	r26, Z+7	; 0x07
      cc:	b0 85       	ldd	r27, Z+8	; 0x08
      ce:	0d c0       	rjmp	.+26     	; 0xea <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
      d0:	dc 01       	movw	r26, r24
      d2:	13 96       	adiw	r26, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <vListInsert+0x22>
      d6:	df 01       	movw	r26, r30
      d8:	12 96       	adiw	r26, 0x02	; 2
      da:	ed 91       	ld	r30, X+
      dc:	fc 91       	ld	r31, X
      de:	13 97       	sbiw	r26, 0x03	; 3
      e0:	20 81       	ld	r18, Z
      e2:	31 81       	ldd	r19, Z+1	; 0x01
      e4:	42 17       	cp	r20, r18
      e6:	53 07       	cpc	r21, r19
      e8:	b0 f7       	brcc	.-20     	; 0xd6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
      ea:	12 96       	adiw	r26, 0x02	; 2
      ec:	ed 91       	ld	r30, X+
      ee:	fc 91       	ld	r31, X
      f0:	13 97       	sbiw	r26, 0x03	; 3
      f2:	fb 83       	std	Y+3, r31	; 0x03
      f4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
      f6:	d5 83       	std	Z+5, r29	; 0x05
      f8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
      fa:	bd 83       	std	Y+5, r27	; 0x05
      fc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
      fe:	13 96       	adiw	r26, 0x03	; 3
     100:	dc 93       	st	X, r29
     102:	ce 93       	st	-X, r28
     104:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     106:	99 87       	std	Y+9, r25	; 0x09
     108:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     10a:	fc 01       	movw	r30, r24
     10c:	20 81       	ld	r18, Z
     10e:	2f 5f       	subi	r18, 0xFF	; 255
     110:	20 83       	st	Z, r18
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     11e:	a0 85       	ldd	r26, Z+8	; 0x08
     120:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     122:	c2 81       	ldd	r28, Z+2	; 0x02
     124:	d3 81       	ldd	r29, Z+3	; 0x03
     126:	84 81       	ldd	r24, Z+4	; 0x04
     128:	95 81       	ldd	r25, Z+5	; 0x05
     12a:	9d 83       	std	Y+5, r25	; 0x05
     12c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     12e:	c4 81       	ldd	r28, Z+4	; 0x04
     130:	d5 81       	ldd	r29, Z+5	; 0x05
     132:	82 81       	ldd	r24, Z+2	; 0x02
     134:	93 81       	ldd	r25, Z+3	; 0x03
     136:	9b 83       	std	Y+3, r25	; 0x03
     138:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     13a:	11 96       	adiw	r26, 0x01	; 1
     13c:	8d 91       	ld	r24, X+
     13e:	9c 91       	ld	r25, X
     140:	12 97       	sbiw	r26, 0x02	; 2
     142:	e8 17       	cp	r30, r24
     144:	f9 07       	cpc	r31, r25
     146:	31 f4       	brne	.+12     	; 0x154 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     148:	84 81       	ldd	r24, Z+4	; 0x04
     14a:	95 81       	ldd	r25, Z+5	; 0x05
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	9c 93       	st	X, r25
     150:	8e 93       	st	-X, r24
     152:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     154:	11 86       	std	Z+9, r1	; 0x09
     156:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     158:	8c 91       	ld	r24, X
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     15e:	8c 91       	ld	r24, X
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     166:	1b bc       	out	0x2b, r1	; 43
     168:	8c e7       	ldi	r24, 0x7C	; 124
     16a:	8a bd       	out	0x2a, r24	; 42
     16c:	8b e0       	ldi	r24, 0x0B	; 11
     16e:	8e bd       	out	0x2e, r24	; 46
     170:	89 b7       	in	r24, 0x39	; 57
     172:	80 61       	ori	r24, 0x10	; 16
     174:	89 bf       	out	0x39, r24	; 57
     176:	08 95       	ret

00000178 <pxPortInitialiseStack>:
     178:	31 e1       	ldi	r19, 0x11	; 17
     17a:	fc 01       	movw	r30, r24
     17c:	30 83       	st	Z, r19
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	22 e2       	ldi	r18, 0x22	; 34
     182:	20 83       	st	Z, r18
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	a3 e3       	ldi	r26, 0x33	; 51
     188:	a0 83       	st	Z, r26
     18a:	31 97       	sbiw	r30, 0x01	; 1
     18c:	60 83       	st	Z, r22
     18e:	31 97       	sbiw	r30, 0x01	; 1
     190:	70 83       	st	Z, r23
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	10 82       	st	Z, r1
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	60 e8       	ldi	r22, 0x80	; 128
     19a:	60 83       	st	Z, r22
     19c:	31 97       	sbiw	r30, 0x01	; 1
     19e:	10 82       	st	Z, r1
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	62 e0       	ldi	r22, 0x02	; 2
     1a4:	60 83       	st	Z, r22
     1a6:	31 97       	sbiw	r30, 0x01	; 1
     1a8:	63 e0       	ldi	r22, 0x03	; 3
     1aa:	60 83       	st	Z, r22
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	64 e0       	ldi	r22, 0x04	; 4
     1b0:	60 83       	st	Z, r22
     1b2:	31 97       	sbiw	r30, 0x01	; 1
     1b4:	65 e0       	ldi	r22, 0x05	; 5
     1b6:	60 83       	st	Z, r22
     1b8:	31 97       	sbiw	r30, 0x01	; 1
     1ba:	66 e0       	ldi	r22, 0x06	; 6
     1bc:	60 83       	st	Z, r22
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	67 e0       	ldi	r22, 0x07	; 7
     1c2:	60 83       	st	Z, r22
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	68 e0       	ldi	r22, 0x08	; 8
     1c8:	60 83       	st	Z, r22
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	69 e0       	ldi	r22, 0x09	; 9
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	60 e1       	ldi	r22, 0x10	; 16
     1d4:	60 83       	st	Z, r22
     1d6:	31 97       	sbiw	r30, 0x01	; 1
     1d8:	30 83       	st	Z, r19
     1da:	31 97       	sbiw	r30, 0x01	; 1
     1dc:	32 e1       	ldi	r19, 0x12	; 18
     1de:	30 83       	st	Z, r19
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	33 e1       	ldi	r19, 0x13	; 19
     1e4:	30 83       	st	Z, r19
     1e6:	31 97       	sbiw	r30, 0x01	; 1
     1e8:	34 e1       	ldi	r19, 0x14	; 20
     1ea:	30 83       	st	Z, r19
     1ec:	31 97       	sbiw	r30, 0x01	; 1
     1ee:	35 e1       	ldi	r19, 0x15	; 21
     1f0:	30 83       	st	Z, r19
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	36 e1       	ldi	r19, 0x16	; 22
     1f6:	30 83       	st	Z, r19
     1f8:	31 97       	sbiw	r30, 0x01	; 1
     1fa:	37 e1       	ldi	r19, 0x17	; 23
     1fc:	30 83       	st	Z, r19
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	38 e1       	ldi	r19, 0x18	; 24
     202:	30 83       	st	Z, r19
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	39 e1       	ldi	r19, 0x19	; 25
     208:	30 83       	st	Z, r19
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	30 e2       	ldi	r19, 0x20	; 32
     20e:	30 83       	st	Z, r19
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	31 e2       	ldi	r19, 0x21	; 33
     214:	30 83       	st	Z, r19
     216:	31 97       	sbiw	r30, 0x01	; 1
     218:	20 83       	st	Z, r18
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	23 e2       	ldi	r18, 0x23	; 35
     21e:	20 83       	st	Z, r18
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	40 83       	st	Z, r20
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	50 83       	st	Z, r21
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	26 e2       	ldi	r18, 0x26	; 38
     22c:	20 83       	st	Z, r18
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	27 e2       	ldi	r18, 0x27	; 39
     232:	20 83       	st	Z, r18
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	28 e2       	ldi	r18, 0x28	; 40
     238:	20 83       	st	Z, r18
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	29 e2       	ldi	r18, 0x29	; 41
     23e:	20 83       	st	Z, r18
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	20 e3       	ldi	r18, 0x30	; 48
     244:	20 83       	st	Z, r18
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	21 e3       	ldi	r18, 0x31	; 49
     24a:	20 83       	st	Z, r18
     24c:	86 97       	sbiw	r24, 0x26	; 38
     24e:	08 95       	ret

00000250 <xPortStartScheduler>:
     250:	0e 94 b3 00 	call	0x166	; 0x166 <prvSetupTimerInterrupt>
     254:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     258:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     25c:	cd 91       	ld	r28, X+
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	dd 91       	ld	r29, X+
     262:	de bf       	out	0x3e, r29	; 62
     264:	ff 91       	pop	r31
     266:	ef 91       	pop	r30
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	7f 91       	pop	r23
     276:	6f 91       	pop	r22
     278:	5f 91       	pop	r21
     27a:	4f 91       	pop	r20
     27c:	3f 91       	pop	r19
     27e:	2f 91       	pop	r18
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	9f 90       	pop	r9
     292:	8f 90       	pop	r8
     294:	7f 90       	pop	r7
     296:	6f 90       	pop	r6
     298:	5f 90       	pop	r5
     29a:	4f 90       	pop	r4
     29c:	3f 90       	pop	r3
     29e:	2f 90       	pop	r2
     2a0:	1f 90       	pop	r1
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	08 95       	ret
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	08 95       	ret

000002ae <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	0f 92       	push	r0
     2b6:	1f 92       	push	r1
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 92       	push	r2
     2bc:	3f 92       	push	r3
     2be:	4f 92       	push	r4
     2c0:	5f 92       	push	r5
     2c2:	6f 92       	push	r6
     2c4:	7f 92       	push	r7
     2c6:	8f 92       	push	r8
     2c8:	9f 92       	push	r9
     2ca:	af 92       	push	r10
     2cc:	bf 92       	push	r11
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     2fa:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     2fe:	0d b6       	in	r0, 0x3d	; 61
     300:	0d 92       	st	X+, r0
     302:	0e b6       	in	r0, 0x3e	; 62
     304:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     306:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     30a:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     30e:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     312:	cd 91       	ld	r28, X+
     314:	cd bf       	out	0x3d, r28	; 61
     316:	dd 91       	ld	r29, X+
     318:	de bf       	out	0x3e, r29	; 62
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	bf 91       	pop	r27
     324:	af 91       	pop	r26
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	7f 91       	pop	r23
     32c:	6f 91       	pop	r22
     32e:	5f 91       	pop	r21
     330:	4f 91       	pop	r20
     332:	3f 91       	pop	r19
     334:	2f 91       	pop	r18
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	af 90       	pop	r10
     346:	9f 90       	pop	r9
     348:	8f 90       	pop	r8
     34a:	7f 90       	pop	r7
     34c:	6f 90       	pop	r6
     34e:	5f 90       	pop	r5
     350:	4f 90       	pop	r4
     352:	3f 90       	pop	r3
     354:	2f 90       	pop	r2
     356:	1f 90       	pop	r1
     358:	0f 90       	pop	r0
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     35e:	08 95       	ret

00000360 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	0f 92       	push	r0
     368:	1f 92       	push	r1
     36a:	11 24       	eor	r1, r1
     36c:	2f 92       	push	r2
     36e:	3f 92       	push	r3
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	2f 93       	push	r18
     38e:	3f 93       	push	r19
     390:	4f 93       	push	r20
     392:	5f 93       	push	r21
     394:	6f 93       	push	r22
     396:	7f 93       	push	r23
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	af 93       	push	r26
     39e:	bf 93       	push	r27
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
     3a8:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     3ac:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     3b0:	0d b6       	in	r0, 0x3d	; 61
     3b2:	0d 92       	st	X+, r0
     3b4:	0e b6       	in	r0, 0x3e	; 62
     3b6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     3b8:	0e 94 c0 05 	call	0xb80	; 0xb80 <xTaskIncrementTick>
     3bc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     3be:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     3c2:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     3c6:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     3ca:	cd 91       	ld	r28, X+
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	dd 91       	ld	r29, X+
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	1f 90       	pop	r1
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0

	asm volatile ( "ret" );
     416:	08 95       	ret

00000418 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     418:	0e 94 b0 01 	call	0x360	; 0x360 <vPortYieldFromTick>
		asm volatile ( "reti" );
     41c:	18 95       	reti

0000041e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     41e:	e6 e8       	ldi	r30, 0x86	; 134
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	aa e8       	ldi	r26, 0x8A	; 138
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	b1 83       	std	Z+1, r27	; 0x01
     428:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     42e:	e2 e6       	ldi	r30, 0x62	; 98
     430:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     432:	f0 93 85 00 	sts	0x0085, r31	; 0x800085 <pxEnd+0x1>
     436:	e0 93 84 00 	sts	0x0084, r30	; 0x800084 <pxEnd>
    pxEnd->xBlockSize = 0;
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     43e:	11 82       	std	Z+1, r1	; 0x01
     440:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     442:	88 ed       	ldi	r24, 0xD8	; 216
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	13 96       	adiw	r26, 0x03	; 3
     448:	9c 93       	st	X, r25
     44a:	8e 93       	st	-X, r24
     44c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     44e:	ed 93       	st	X+, r30
     450:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     452:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <xMinimumEverFreeBytesRemaining+0x1>
     456:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     45a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <xFreeBytesRemaining+0x1>
     45e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e8       	ldi	r25, 0x80	; 128
     466:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
     46a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
     46e:	08 95       	ret

00000470 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     476:	a6 e8       	ldi	r26, 0x86	; 134
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	01 c0       	rjmp	.+2      	; 0x47e <prvInsertBlockIntoFreeList+0xe>
     47c:	df 01       	movw	r26, r30
     47e:	ed 91       	ld	r30, X+
     480:	fc 91       	ld	r31, X
     482:	11 97       	sbiw	r26, 0x01	; 1
     484:	ec 17       	cp	r30, r28
     486:	fd 07       	cpc	r31, r29
     488:	c8 f3       	brcs	.-14     	; 0x47c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	13 97       	sbiw	r26, 0x03	; 3
     492:	9d 01       	movw	r18, r26
     494:	28 0f       	add	r18, r24
     496:	39 1f       	adc	r19, r25
     498:	c2 17       	cp	r28, r18
     49a:	d3 07       	cpc	r29, r19
     49c:	49 f4       	brne	.+18     	; 0x4b0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     49e:	2a 81       	ldd	r18, Y+2	; 0x02
     4a0:	3b 81       	ldd	r19, Y+3	; 0x03
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
     4a6:	13 96       	adiw	r26, 0x03	; 3
     4a8:	9c 93       	st	X, r25
     4aa:	8e 93       	st	-X, r24
     4ac:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     4ae:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	9b 81       	ldd	r25, Y+3	; 0x03
     4b4:	9e 01       	movw	r18, r28
     4b6:	28 0f       	add	r18, r24
     4b8:	39 1f       	adc	r19, r25
     4ba:	e2 17       	cp	r30, r18
     4bc:	f3 07       	cpc	r31, r19
     4be:	c1 f4       	brne	.+48     	; 0x4f0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     4c0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <pxEnd>
     4c4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <pxEnd+0x1>
     4c8:	e2 17       	cp	r30, r18
     4ca:	f3 07       	cpc	r31, r19
     4cc:	71 f0       	breq	.+28     	; 0x4ea <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4ce:	22 81       	ldd	r18, Z+2	; 0x02
     4d0:	33 81       	ldd	r19, Z+3	; 0x03
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	9b 83       	std	Y+3, r25	; 0x03
     4d8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	99 83       	std	Y+1, r25	; 0x01
     4e6:	88 83       	st	Y, r24
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4ea:	39 83       	std	Y+1, r19	; 0x01
     4ec:	28 83       	st	Y, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4f0:	f9 83       	std	Y+1, r31	; 0x01
     4f2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4f4:	ca 17       	cp	r28, r26
     4f6:	db 07       	cpc	r29, r27
     4f8:	11 f0       	breq	.+4      	; 0x4fe <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4fa:	cd 93       	st	X+, r28
     4fc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     512:	0e 94 b0 05 	call	0xb60	; 0xb60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     516:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <pxEnd>
     51a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <pxEnd+0x1>
     51e:	89 2b       	or	r24, r25
     520:	11 f4       	brne	.+4      	; 0x526 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     522:	0e 94 0f 02 	call	0x41e	; 0x41e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     526:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     52a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
     52e:	80 23       	and	r24, r16
     530:	91 23       	and	r25, r17
     532:	89 2b       	or	r24, r25
     534:	09 f0       	breq	.+2      	; 0x538 <pvPortMalloc+0x34>
     536:	77 c0       	rjmp	.+238    	; 0x626 <pvPortMalloc+0x122>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     538:	01 15       	cp	r16, r1
     53a:	11 05       	cpc	r17, r1
     53c:	49 f0       	breq	.+18     	; 0x550 <pvPortMalloc+0x4c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     53e:	c8 01       	movw	r24, r16
     540:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
     542:	08 17       	cp	r16, r24
     544:	19 07       	cpc	r17, r25
     546:	18 f0       	brcs	.+6      	; 0x54e <pvPortMalloc+0x4a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
     548:	00 e0       	ldi	r16, 0x00	; 0
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	01 c0       	rjmp	.+2      	; 0x550 <pvPortMalloc+0x4c>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     54e:	8c 01       	movw	r16, r24
            else
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     550:	01 15       	cp	r16, r1
     552:	11 05       	cpc	r17, r1
     554:	09 f4       	brne	.+2      	; 0x558 <pvPortMalloc+0x54>
     556:	6a c0       	rjmp	.+212    	; 0x62c <pvPortMalloc+0x128>
     558:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xFreeBytesRemaining>
     55c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xFreeBytesRemaining+0x1>
     560:	80 17       	cp	r24, r16
     562:	91 07       	cpc	r25, r17
     564:	08 f4       	brcc	.+2      	; 0x568 <pvPortMalloc+0x64>
     566:	65 c0       	rjmp	.+202    	; 0x632 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     568:	c0 91 86 00 	lds	r28, 0x0086	; 0x800086 <xStart>
     56c:	d0 91 87 00 	lds	r29, 0x0087	; 0x800087 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     570:	e6 e8       	ldi	r30, 0x86	; 134
     572:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     574:	02 c0       	rjmp	.+4      	; 0x57a <pvPortMalloc+0x76>
                {
                    pxPreviousBlock = pxBlock;
     576:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     578:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	80 17       	cp	r24, r16
     580:	91 07       	cpc	r25, r17
     582:	20 f4       	brcc	.+8      	; 0x58c <pvPortMalloc+0x88>
     584:	88 81       	ld	r24, Y
     586:	99 81       	ldd	r25, Y+1	; 0x01
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	a9 f7       	brne	.-22     	; 0x576 <pvPortMalloc+0x72>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     58c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <pxEnd>
     590:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <pxEnd+0x1>
     594:	c8 17       	cp	r28, r24
     596:	d9 07       	cpc	r29, r25
     598:	09 f4       	brne	.+2      	; 0x59c <pvPortMalloc+0x98>
     59a:	4e c0       	rjmp	.+156    	; 0x638 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     59c:	e0 80       	ld	r14, Z
     59e:	f1 80       	ldd	r15, Z+1	; 0x01
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	e8 0e       	add	r14, r24
     5a4:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5a6:	88 81       	ld	r24, Y
     5a8:	99 81       	ldd	r25, Y+1	; 0x01
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	3b 81       	ldd	r19, Y+3	; 0x03
     5b2:	20 1b       	sub	r18, r16
     5b4:	31 0b       	sbc	r19, r17
     5b6:	29 30       	cpi	r18, 0x09	; 9
     5b8:	31 05       	cpc	r19, r1
     5ba:	50 f0       	brcs	.+20     	; 0x5d0 <pvPortMalloc+0xcc>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5bc:	ce 01       	movw	r24, r28
     5be:	80 0f       	add	r24, r16
     5c0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5c2:	fc 01       	movw	r30, r24
     5c4:	33 83       	std	Z+3, r19	; 0x03
     5c6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5c8:	1b 83       	std	Y+3, r17	; 0x03
     5ca:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5cc:	0e 94 38 02 	call	0x470	; 0x470 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	3b 81       	ldd	r19, Y+3	; 0x03
     5d4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xFreeBytesRemaining>
     5d8:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xFreeBytesRemaining+0x1>
     5dc:	82 1b       	sub	r24, r18
     5de:	93 0b       	sbc	r25, r19
     5e0:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <xFreeBytesRemaining+0x1>
     5e4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5e8:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <xMinimumEverFreeBytesRemaining>
     5ec:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <xMinimumEverFreeBytesRemaining+0x1>
     5f0:	84 17       	cp	r24, r20
     5f2:	95 07       	cpc	r25, r21
     5f4:	20 f4       	brcc	.+8      	; 0x5fe <pvPortMalloc+0xfa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5f6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <xMinimumEverFreeBytesRemaining+0x1>
     5fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     602:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
     606:	28 2b       	or	r18, r24
     608:	39 2b       	or	r19, r25
     60a:	3b 83       	std	Y+3, r19	; 0x03
     60c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     612:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <xNumberOfSuccessfulAllocations>
     616:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <xNumberOfSuccessfulAllocations+0x1>
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <xNumberOfSuccessfulAllocations+0x1>
     620:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <xNumberOfSuccessfulAllocations>
     624:	0b c0       	rjmp	.+22     	; 0x63c <pvPortMalloc+0x138>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     626:	e1 2c       	mov	r14, r1
     628:	f1 2c       	mov	r15, r1
     62a:	08 c0       	rjmp	.+16     	; 0x63c <pvPortMalloc+0x138>
     62c:	e1 2c       	mov	r14, r1
     62e:	f1 2c       	mov	r15, r1
     630:	05 c0       	rjmp	.+10     	; 0x63c <pvPortMalloc+0x138>
     632:	e1 2c       	mov	r14, r1
     634:	f1 2c       	mov	r15, r1
     636:	02 c0       	rjmp	.+4      	; 0x63c <pvPortMalloc+0x138>
     638:	e1 2c       	mov	r14, r1
     63a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     63c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <xTaskResumeAll>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     640:	c7 01       	movw	r24, r14
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	99 f1       	breq	.+102    	; 0x6c2 <vPortFree+0x72>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     65c:	ec 01       	movw	r28, r24
     65e:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     660:	4a 81       	ldd	r20, Y+2	; 0x02
     662:	5b 81       	ldd	r21, Y+3	; 0x03
     664:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__data_end>
     668:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <__data_end+0x1>
     66c:	ba 01       	movw	r22, r20
     66e:	62 23       	and	r22, r18
     670:	73 23       	and	r23, r19
     672:	67 2b       	or	r22, r23
     674:	31 f1       	breq	.+76     	; 0x6c2 <vPortFree+0x72>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     676:	68 81       	ld	r22, Y
     678:	79 81       	ldd	r23, Y+1	; 0x01
     67a:	67 2b       	or	r22, r23
     67c:	11 f5       	brne	.+68     	; 0x6c2 <vPortFree+0x72>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     67e:	20 95       	com	r18
     680:	30 95       	com	r19
     682:	24 23       	and	r18, r20
     684:	35 23       	and	r19, r21
     686:	3b 83       	std	Y+3, r19	; 0x03
     688:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     68a:	0e 94 b0 05 	call	0xb60	; 0xb60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     68e:	8a 81       	ldd	r24, Y+2	; 0x02
     690:	9b 81       	ldd	r25, Y+3	; 0x03
     692:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <xFreeBytesRemaining>
     696:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <xFreeBytesRemaining+0x1>
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <xFreeBytesRemaining+0x1>
     6a2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 38 02 	call	0x470	; 0x470 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6ac:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <xNumberOfSuccessfulFrees>
     6b0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <xNumberOfSuccessfulFrees+0x1>
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <xNumberOfSuccessfulFrees+0x1>
     6ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6be:	0e 94 da 06 	call	0xdb4	; 0xdb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     6cc:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <pxDelayedTaskList>
     6d0:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     6d4:	80 81       	ld	r24, Z
     6d6:	81 11       	cpse	r24, r1
     6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <prvResetNextTaskUnblockTime+0x1c>
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <xNextTaskUnblockTime+0x1>
     6e2:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xNextTaskUnblockTime>
     6e6:	08 95       	ret
     6e8:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <pxDelayedTaskList>
     6ec:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     6f0:	05 80       	ldd	r0, Z+5	; 0x05
     6f2:	f6 81       	ldd	r31, Z+6	; 0x06
     6f4:	e0 2d       	mov	r30, r0
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <xNextTaskUnblockTime+0x1>
     6fe:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xNextTaskUnblockTime>
     702:	08 95       	ret

00000704 <prvDeleteTCB>:
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
     70a:	8f 89       	ldd	r24, Y+23	; 0x17
     70c:	98 8d       	ldd	r25, Y+24	; 0x18
     70e:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
     712:	ce 01       	movw	r24, r28
     714:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <prvInitialiseNewTask>:
     71e:	6f 92       	push	r6
     720:	7f 92       	push	r7
     722:	8f 92       	push	r8
     724:	9f 92       	push	r9
     726:	af 92       	push	r10
     728:	bf 92       	push	r11
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	4c 01       	movw	r8, r24
     73e:	d5 01       	movw	r26, r10
     740:	57 96       	adiw	r26, 0x17	; 23
     742:	8d 91       	ld	r24, X+
     744:	9c 91       	ld	r25, X
     746:	58 97       	sbiw	r26, 0x18	; 24
     748:	21 50       	subi	r18, 0x01	; 1
     74a:	31 09       	sbc	r19, r1
     74c:	3c 01       	movw	r6, r24
     74e:	62 0e       	add	r6, r18
     750:	73 1e       	adc	r7, r19
     752:	61 15       	cp	r22, r1
     754:	71 05       	cpc	r23, r1
     756:	89 f4       	brne	.+34     	; 0x77a <prvInitialiseNewTask+0x5c>
     758:	16 c0       	rjmp	.+44     	; 0x786 <prvInitialiseNewTask+0x68>
     75a:	82 2f       	mov	r24, r18
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	fb 01       	movw	r30, r22
     760:	e8 0f       	add	r30, r24
     762:	f9 1f       	adc	r31, r25
     764:	30 81       	ld	r19, Z
     766:	d5 01       	movw	r26, r10
     768:	a8 0f       	add	r26, r24
     76a:	b9 1f       	adc	r27, r25
     76c:	59 96       	adiw	r26, 0x19	; 25
     76e:	3c 93       	st	X, r19
     770:	80 81       	ld	r24, Z
     772:	88 23       	and	r24, r24
     774:	29 f0       	breq	.+10     	; 0x780 <prvInitialiseNewTask+0x62>
     776:	2f 5f       	subi	r18, 0xFF	; 255
     778:	01 c0       	rjmp	.+2      	; 0x77c <prvInitialiseNewTask+0x5e>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	28 30       	cpi	r18, 0x08	; 8
     77e:	68 f3       	brcs	.-38     	; 0x75a <prvInitialiseNewTask+0x3c>
     780:	f5 01       	movw	r30, r10
     782:	10 a2       	std	Z+32, r1	; 0x20
     784:	03 c0       	rjmp	.+6      	; 0x78c <prvInitialiseNewTask+0x6e>
     786:	d5 01       	movw	r26, r10
     788:	59 96       	adiw	r26, 0x19	; 25
     78a:	1c 92       	st	X, r1
     78c:	b3 e0       	ldi	r27, 0x03	; 3
     78e:	be 15       	cp	r27, r14
     790:	20 f4       	brcc	.+8      	; 0x79a <prvInitialiseNewTask+0x7c>
     792:	0f 2e       	mov	r0, r31
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	ef 2e       	mov	r14, r31
     798:	f0 2d       	mov	r31, r0
     79a:	f5 01       	movw	r30, r10
     79c:	e6 8a       	std	Z+22, r14	; 0x16
     79e:	c5 01       	movw	r24, r10
     7a0:	02 96       	adiw	r24, 0x02	; 2
     7a2:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     7a6:	c5 01       	movw	r24, r10
     7a8:	0c 96       	adiw	r24, 0x0c	; 12
     7aa:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     7ae:	d5 01       	movw	r26, r10
     7b0:	19 96       	adiw	r26, 0x09	; 9
     7b2:	bc 92       	st	X, r11
     7b4:	ae 92       	st	-X, r10
     7b6:	18 97       	sbiw	r26, 0x08	; 8
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	8e 19       	sub	r24, r14
     7be:	91 09       	sbc	r25, r1
     7c0:	1d 96       	adiw	r26, 0x0d	; 13
     7c2:	9c 93       	st	X, r25
     7c4:	8e 93       	st	-X, r24
     7c6:	1c 97       	sbiw	r26, 0x0c	; 12
     7c8:	53 96       	adiw	r26, 0x13	; 19
     7ca:	bc 92       	st	X, r11
     7cc:	ae 92       	st	-X, r10
     7ce:	52 97       	sbiw	r26, 0x12	; 18
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	f5 01       	movw	r30, r10
     7d4:	b1 96       	adiw	r30, 0x21	; 33
     7d6:	df 01       	movw	r26, r30
     7d8:	1d 92       	st	X+, r1
     7da:	8a 95       	dec	r24
     7dc:	e9 f7       	brne	.-6      	; 0x7d8 <prvInitialiseNewTask+0xba>
     7de:	f5 01       	movw	r30, r10
     7e0:	15 a2       	std	Z+37, r1	; 0x25
     7e2:	a8 01       	movw	r20, r16
     7e4:	b4 01       	movw	r22, r8
     7e6:	c3 01       	movw	r24, r6
     7e8:	0e 94 bc 00 	call	0x178	; 0x178 <pxPortInitialiseStack>
     7ec:	d5 01       	movw	r26, r10
     7ee:	8d 93       	st	X+, r24
     7f0:	9c 93       	st	X, r25
     7f2:	c1 14       	cp	r12, r1
     7f4:	d1 04       	cpc	r13, r1
     7f6:	19 f0       	breq	.+6      	; 0x7fe <prvInitialiseNewTask+0xe0>
     7f8:	f6 01       	movw	r30, r12
     7fa:	b1 82       	std	Z+1, r11	; 0x01
     7fc:	a0 82       	st	Z, r10
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	9f 90       	pop	r9
     812:	8f 90       	pop	r8
     814:	7f 90       	pop	r7
     816:	6f 90       	pop	r6
     818:	08 95       	ret

0000081a <prvInitialiseTaskLists>:
     81a:	cf 93       	push	r28
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	10 c0       	rjmp	.+32     	; 0x840 <prvInitialiseTaskLists+0x26>
     820:	8c 2f       	mov	r24, r28
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	9c 01       	movw	r18, r24
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	22 0f       	add	r18, r18
     82c:	33 1f       	adc	r19, r19
     82e:	22 0f       	add	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	82 0f       	add	r24, r18
     834:	93 1f       	adc	r25, r19
     836:	82 56       	subi	r24, 0x62	; 98
     838:	99 4f       	sbci	r25, 0xF9	; 249
     83a:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     83e:	cf 5f       	subi	r28, 0xFF	; 255
     840:	c4 30       	cpi	r28, 0x04	; 4
     842:	70 f3       	brcs	.-36     	; 0x820 <prvInitialiseTaskLists+0x6>
     844:	85 e9       	ldi	r24, 0x95	; 149
     846:	96 e0       	ldi	r25, 0x06	; 6
     848:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     84c:	8c e8       	ldi	r24, 0x8C	; 140
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     854:	8f e7       	ldi	r24, 0x7F	; 127
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     85c:	86 e7       	ldi	r24, 0x76	; 118
     85e:	96 e0       	ldi	r25, 0x06	; 6
     860:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     864:	85 e9       	ldi	r24, 0x95	; 149
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <pxDelayedTaskList+0x1>
     86c:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <pxDelayedTaskList>
     870:	8c e8       	ldi	r24, 0x8C	; 140
     872:	96 e0       	ldi	r25, 0x06	; 6
     874:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <pxOverflowDelayedTaskList+0x1>
     878:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <pxOverflowDelayedTaskList>
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <prvAddNewTaskToReadyList>:
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	0f 92       	push	r0
     88c:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxCurrentNumberOfTasks>
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxCurrentNumberOfTasks>
     896:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     89a:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     89e:	89 2b       	or	r24, r25
     8a0:	59 f4       	brne	.+22     	; 0x8b8 <prvAddNewTaskToReadyList+0x38>
     8a2:	d0 93 c3 06 	sts	0x06C3, r29	; 0x8006c3 <pxCurrentTCB+0x1>
     8a6:	c0 93 c2 06 	sts	0x06C2, r28	; 0x8006c2 <pxCurrentTCB>
     8aa:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxCurrentNumberOfTasks>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	99 f4       	brne	.+38     	; 0x8d8 <prvAddNewTaskToReadyList+0x58>
     8b2:	0e 94 0d 04 	call	0x81a	; 0x81a <prvInitialiseTaskLists>
     8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <prvAddNewTaskToReadyList+0x58>
     8b8:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xSchedulerRunning>
     8bc:	81 11       	cpse	r24, r1
     8be:	0c c0       	rjmp	.+24     	; 0x8d8 <prvAddNewTaskToReadyList+0x58>
     8c0:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     8c4:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     8c8:	96 89       	ldd	r25, Z+22	; 0x16
     8ca:	8e 89       	ldd	r24, Y+22	; 0x16
     8cc:	89 17       	cp	r24, r25
     8ce:	20 f0       	brcs	.+8      	; 0x8d8 <prvAddNewTaskToReadyList+0x58>
     8d0:	d0 93 c3 06 	sts	0x06C3, r29	; 0x8006c3 <pxCurrentTCB+0x1>
     8d4:	c0 93 c2 06 	sts	0x06C2, r28	; 0x8006c2 <pxCurrentTCB>
     8d8:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxTaskNumber>
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTaskNumber>
     8e2:	8e 89       	ldd	r24, Y+22	; 0x16
     8e4:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <uxTopReadyPriority>
     8e8:	98 17       	cp	r25, r24
     8ea:	10 f4       	brcc	.+4      	; 0x8f0 <prvAddNewTaskToReadyList+0x70>
     8ec:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxTopReadyPriority>
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	fc 01       	movw	r30, r24
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	8e 0f       	add	r24, r30
     902:	9f 1f       	adc	r25, r31
     904:	fc 01       	movw	r30, r24
     906:	e2 56       	subi	r30, 0x62	; 98
     908:	f9 4f       	sbci	r31, 0xF9	; 249
     90a:	01 80       	ldd	r0, Z+1	; 0x01
     90c:	f2 81       	ldd	r31, Z+2	; 0x02
     90e:	e0 2d       	mov	r30, r0
     910:	fd 83       	std	Y+5, r31	; 0x05
     912:	ec 83       	std	Y+4, r30	; 0x04
     914:	84 81       	ldd	r24, Z+4	; 0x04
     916:	95 81       	ldd	r25, Z+5	; 0x05
     918:	9f 83       	std	Y+7, r25	; 0x07
     91a:	8e 83       	std	Y+6, r24	; 0x06
     91c:	a4 81       	ldd	r26, Z+4	; 0x04
     91e:	b5 81       	ldd	r27, Z+5	; 0x05
     920:	ce 01       	movw	r24, r28
     922:	02 96       	adiw	r24, 0x02	; 2
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	9c 93       	st	X, r25
     928:	8e 93       	st	-X, r24
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	95 83       	std	Z+5, r25	; 0x05
     92e:	84 83       	std	Z+4, r24	; 0x04
     930:	ee 89       	ldd	r30, Y+22	; 0x16
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	cf 01       	movw	r24, r30
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	e8 0f       	add	r30, r24
     944:	f9 1f       	adc	r31, r25
     946:	e2 56       	subi	r30, 0x62	; 98
     948:	f9 4f       	sbci	r31, 0xF9	; 249
     94a:	fb 87       	std	Y+11, r31	; 0x0b
     94c:	ea 87       	std	Y+10, r30	; 0x0a
     94e:	80 81       	ld	r24, Z
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 83       	st	Z, r24
     954:	0f 90       	pop	r0
     956:	0f be       	out	0x3f, r0	; 63
     958:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xSchedulerRunning>
     95c:	88 23       	and	r24, r24
     95e:	51 f0       	breq	.+20     	; 0x974 <prvAddNewTaskToReadyList+0xf4>
     960:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     964:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     968:	96 89       	ldd	r25, Z+22	; 0x16
     96a:	8e 89       	ldd	r24, Y+22	; 0x16
     96c:	98 17       	cp	r25, r24
     96e:	10 f4       	brcc	.+4      	; 0x974 <prvAddNewTaskToReadyList+0xf4>
     970:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <prvCheckTasksWaitingTermination>:
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	1c c0       	rjmp	.+56     	; 0x9b8 <prvCheckTasksWaitingTermination+0x3e>
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	0f 92       	push	r0
     986:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <xTasksWaitingTermination+0x5>
     98a:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <xTasksWaitingTermination+0x6>
     98e:	c6 81       	ldd	r28, Z+6	; 0x06
     990:	d7 81       	ldd	r29, Z+7	; 0x07
     992:	ce 01       	movw	r24, r28
     994:	02 96       	adiw	r24, 0x02	; 2
     996:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
     99a:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxCurrentNumberOfTasks>
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxCurrentNumberOfTasks>
     9a4:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <uxDeletedTasksWaitingCleanUp>
     9a8:	81 50       	subi	r24, 0x01	; 1
     9aa:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <uxDeletedTasksWaitingCleanUp>
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 82 03 	call	0x704	; 0x704 <prvDeleteTCB>
     9b8:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <uxDeletedTasksWaitingCleanUp>
     9bc:	81 11       	cpse	r24, r1
     9be:	e0 cf       	rjmp	.-64     	; 0x980 <prvCheckTasksWaitingTermination+0x6>
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <prvIdleTask>:
     9c6:	0e 94 bd 04 	call	0x97a	; 0x97a <prvCheckTasksWaitingTermination>
     9ca:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <pxReadyTasksLists>
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	d0 f3       	brcs	.-12     	; 0x9c6 <prvIdleTask>
     9d2:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     9d6:	f7 cf       	rjmp	.-18     	; 0x9c6 <prvIdleTask>

000009d8 <prvAddCurrentTaskToDelayedList>:
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
     9e2:	00 91 72 06 	lds	r16, 0x0672	; 0x800672 <xTickCount>
     9e6:	10 91 73 06 	lds	r17, 0x0673	; 0x800673 <xTickCount+0x1>
     9ea:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     9ee:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     9f2:	02 96       	adiw	r24, 0x02	; 2
     9f4:	0e 94 8c 00 	call	0x118	; 0x118 <uxListRemove>
     9f8:	c0 0f       	add	r28, r16
     9fa:	d1 1f       	adc	r29, r17
     9fc:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     a00:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     a04:	d3 83       	std	Z+3, r29	; 0x03
     a06:	c2 83       	std	Z+2, r28	; 0x02
     a08:	c0 17       	cp	r28, r16
     a0a:	d1 07       	cpc	r29, r17
     a0c:	68 f4       	brcc	.+26     	; 0xa28 <prvAddCurrentTaskToDelayedList+0x50>
     a0e:	60 91 c2 06 	lds	r22, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     a12:	70 91 c3 06 	lds	r23, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     a16:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <pxOverflowDelayedTaskList>
     a1a:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <pxOverflowDelayedTaskList+0x1>
     a1e:	6e 5f       	subi	r22, 0xFE	; 254
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsert>
     a26:	17 c0       	rjmp	.+46     	; 0xa56 <prvAddCurrentTaskToDelayedList+0x7e>
     a28:	60 91 c2 06 	lds	r22, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     a2c:	70 91 c3 06 	lds	r23, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     a30:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <pxDelayedTaskList>
     a34:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     a38:	6e 5f       	subi	r22, 0xFE	; 254
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsert>
     a40:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <xNextTaskUnblockTime>
     a44:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <xNextTaskUnblockTime+0x1>
     a48:	c8 17       	cp	r28, r24
     a4a:	d9 07       	cpc	r29, r25
     a4c:	20 f4       	brcc	.+8      	; 0xa56 <prvAddCurrentTaskToDelayedList+0x7e>
     a4e:	d0 93 6a 06 	sts	0x066A, r29	; 0x80066a <xNextTaskUnblockTime+0x1>
     a52:	c0 93 69 06 	sts	0x0669, r28	; 0x800669 <xNextTaskUnblockTime>
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <xTaskCreate>:
     a60:	2f 92       	push	r2
     a62:	3f 92       	push	r3
     a64:	4f 92       	push	r4
     a66:	5f 92       	push	r5
     a68:	6f 92       	push	r6
     a6a:	7f 92       	push	r7
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	3c 01       	movw	r6, r24
     a86:	1b 01       	movw	r2, r22
     a88:	5a 01       	movw	r10, r20
     a8a:	29 01       	movw	r4, r18
     a8c:	ca 01       	movw	r24, r20
     a8e:	0e 94 82 02 	call	0x504	; 0x504 <pvPortMalloc>
     a92:	6c 01       	movw	r12, r24
     a94:	89 2b       	or	r24, r25
     a96:	71 f0       	breq	.+28     	; 0xab4 <xTaskCreate+0x54>
     a98:	86 e2       	ldi	r24, 0x26	; 38
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 82 02 	call	0x504	; 0x504 <pvPortMalloc>
     aa0:	ec 01       	movw	r28, r24
     aa2:	89 2b       	or	r24, r25
     aa4:	19 f0       	breq	.+6      	; 0xaac <xTaskCreate+0x4c>
     aa6:	d8 8e       	std	Y+24, r13	; 0x18
     aa8:	cf 8a       	std	Y+23, r12	; 0x17
     aaa:	06 c0       	rjmp	.+12     	; 0xab8 <xTaskCreate+0x58>
     aac:	c6 01       	movw	r24, r12
     aae:	0e 94 28 03 	call	0x650	; 0x650 <vPortFree>
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <xTaskCreate+0x58>
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
     ab8:	20 97       	sbiw	r28, 0x00	; 0
     aba:	91 f0       	breq	.+36     	; 0xae0 <xTaskCreate+0x80>
     abc:	95 01       	movw	r18, r10
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	81 2c       	mov	r8, r1
     ac4:	91 2c       	mov	r9, r1
     ac6:	5e 01       	movw	r10, r28
     ac8:	67 01       	movw	r12, r14
     aca:	e0 2e       	mov	r14, r16
     acc:	82 01       	movw	r16, r4
     ace:	b1 01       	movw	r22, r2
     ad0:	c3 01       	movw	r24, r6
     ad2:	0e 94 8f 03 	call	0x71e	; 0x71e <prvInitialiseNewTask>
     ad6:	ce 01       	movw	r24, r28
     ad8:	0e 94 40 04 	call	0x880	; 0x880 <prvAddNewTaskToReadyList>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <xTaskCreate+0x82>
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	08 95       	ret

00000b08 <vTaskStartScheduler>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	0f 2e       	mov	r0, r31
     b10:	f7 e6       	ldi	r31, 0x67	; 103
     b12:	ef 2e       	mov	r14, r31
     b14:	f6 e0       	ldi	r31, 0x06	; 6
     b16:	ff 2e       	mov	r15, r31
     b18:	f0 2d       	mov	r31, r0
     b1a:	00 e0       	ldi	r16, 0x00	; 0
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	45 e5       	ldi	r20, 0x55	; 85
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	61 e6       	ldi	r22, 0x61	; 97
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	83 ee       	ldi	r24, 0xE3	; 227
     b2a:	94 e0       	ldi	r25, 0x04	; 4
     b2c:	0e 94 30 05 	call	0xa60	; 0xa60 <xTaskCreate>
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	81 f4       	brne	.+32     	; 0xb54 <vTaskStartScheduler+0x4c>
     b34:	f8 94       	cli
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <xNextTaskUnblockTime+0x1>
     b3e:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <xNextTaskUnblockTime>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xSchedulerRunning>
     b48:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <xTickCount+0x1>
     b4c:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <xTickCount>
     b50:	0e 94 28 01 	call	0x250	; 0x250 <xPortStartScheduler>
     b54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	08 95       	ret

00000b60 <vTaskSuspendAll>:
     b60:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxSchedulerSuspended>
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <uxSchedulerSuspended>
     b6a:	08 95       	ret

00000b6c <xTaskGetTickCount>:
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	0f 92       	push	r0
     b72:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xTickCount>
     b76:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <xTickCount+0x1>
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	08 95       	ret

00000b80 <xTaskIncrementTick>:
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxSchedulerSuspended>
     b8c:	81 11       	cpse	r24, r1
     b8e:	01 c1       	rjmp	.+514    	; 0xd92 <xTaskIncrementTick+0x212>
     b90:	c0 91 72 06 	lds	r28, 0x0672	; 0x800672 <xTickCount>
     b94:	d0 91 73 06 	lds	r29, 0x0673	; 0x800673 <xTickCount+0x1>
     b98:	8e 01       	movw	r16, r28
     b9a:	0f 5f       	subi	r16, 0xFF	; 255
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	10 93 73 06 	sts	0x0673, r17	; 0x800673 <xTickCount+0x1>
     ba2:	00 93 72 06 	sts	0x0672, r16	; 0x800672 <xTickCount>
     ba6:	01 15       	cp	r16, r1
     ba8:	11 05       	cpc	r17, r1
     baa:	b9 f4       	brne	.+46     	; 0xbda <xTaskIncrementTick+0x5a>
     bac:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <pxDelayedTaskList>
     bb0:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     bb4:	20 91 88 06 	lds	r18, 0x0688	; 0x800688 <pxOverflowDelayedTaskList>
     bb8:	30 91 89 06 	lds	r19, 0x0689	; 0x800689 <pxOverflowDelayedTaskList+0x1>
     bbc:	30 93 8b 06 	sts	0x068B, r19	; 0x80068b <pxDelayedTaskList+0x1>
     bc0:	20 93 8a 06 	sts	0x068A, r18	; 0x80068a <pxDelayedTaskList>
     bc4:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <pxOverflowDelayedTaskList+0x1>
     bc8:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <pxOverflowDelayedTaskList>
     bcc:	80 91 6c 06 	lds	r24, 0x066C	; 0x80066c <xNumOfOverflows>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <xNumOfOverflows>
     bd6:	0e 94 66 03 	call	0x6cc	; 0x6cc <prvResetNextTaskUnblockTime>
     bda:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <xNextTaskUnblockTime>
     bde:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <xNextTaskUnblockTime+0x1>
     be2:	08 17       	cp	r16, r24
     be4:	19 07       	cpc	r17, r25
     be6:	20 f4       	brcc	.+8      	; 0xbf0 <xTaskIncrementTick+0x70>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	b8 c0       	rjmp	.+368    	; 0xd5c <xTaskIncrementTick+0x1dc>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <xTaskIncrementTick+0x72>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <pxDelayedTaskList>
     bf6:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     bfa:	90 81       	ld	r25, Z
     bfc:	91 11       	cpse	r25, r1
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <xTaskIncrementTick+0x8e>
     c00:	2f ef       	ldi	r18, 0xFF	; 255
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	30 93 6a 06 	sts	0x066A, r19	; 0x80066a <xNextTaskUnblockTime+0x1>
     c08:	20 93 69 06 	sts	0x0669, r18	; 0x800669 <xNextTaskUnblockTime>
     c0c:	a7 c0       	rjmp	.+334    	; 0xd5c <xTaskIncrementTick+0x1dc>
     c0e:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <pxDelayedTaskList>
     c12:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <pxDelayedTaskList+0x1>
     c16:	05 80       	ldd	r0, Z+5	; 0x05
     c18:	f6 81       	ldd	r31, Z+6	; 0x06
     c1a:	e0 2d       	mov	r30, r0
     c1c:	06 80       	ldd	r0, Z+6	; 0x06
     c1e:	f7 81       	ldd	r31, Z+7	; 0x07
     c20:	e0 2d       	mov	r30, r0
     c22:	22 81       	ldd	r18, Z+2	; 0x02
     c24:	33 81       	ldd	r19, Z+3	; 0x03
     c26:	02 17       	cp	r16, r18
     c28:	13 07       	cpc	r17, r19
     c2a:	28 f4       	brcc	.+10     	; 0xc36 <xTaskIncrementTick+0xb6>
     c2c:	30 93 6a 06 	sts	0x066A, r19	; 0x80066a <xNextTaskUnblockTime+0x1>
     c30:	20 93 69 06 	sts	0x0669, r18	; 0x800669 <xNextTaskUnblockTime>
     c34:	93 c0       	rjmp	.+294    	; 0xd5c <xTaskIncrementTick+0x1dc>
     c36:	a2 85       	ldd	r26, Z+10	; 0x0a
     c38:	b3 85       	ldd	r27, Z+11	; 0x0b
     c3a:	24 81       	ldd	r18, Z+4	; 0x04
     c3c:	35 81       	ldd	r19, Z+5	; 0x05
     c3e:	46 81       	ldd	r20, Z+6	; 0x06
     c40:	57 81       	ldd	r21, Z+7	; 0x07
     c42:	e9 01       	movw	r28, r18
     c44:	5d 83       	std	Y+5, r21	; 0x05
     c46:	4c 83       	std	Y+4, r20	; 0x04
     c48:	26 81       	ldd	r18, Z+6	; 0x06
     c4a:	37 81       	ldd	r19, Z+7	; 0x07
     c4c:	44 81       	ldd	r20, Z+4	; 0x04
     c4e:	55 81       	ldd	r21, Z+5	; 0x05
     c50:	e9 01       	movw	r28, r18
     c52:	5b 83       	std	Y+3, r21	; 0x03
     c54:	4a 83       	std	Y+2, r20	; 0x02
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	2d 91       	ld	r18, X+
     c5a:	3c 91       	ld	r19, X
     c5c:	12 97       	sbiw	r26, 0x02	; 2
     c5e:	af 01       	movw	r20, r30
     c60:	4e 5f       	subi	r20, 0xFE	; 254
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	24 17       	cp	r18, r20
     c66:	35 07       	cpc	r19, r21
     c68:	31 f4       	brne	.+12     	; 0xc76 <xTaskIncrementTick+0xf6>
     c6a:	26 81       	ldd	r18, Z+6	; 0x06
     c6c:	37 81       	ldd	r19, Z+7	; 0x07
     c6e:	12 96       	adiw	r26, 0x02	; 2
     c70:	3c 93       	st	X, r19
     c72:	2e 93       	st	-X, r18
     c74:	11 97       	sbiw	r26, 0x01	; 1
     c76:	13 86       	std	Z+11, r1	; 0x0b
     c78:	12 86       	std	Z+10, r1	; 0x0a
     c7a:	9c 91       	ld	r25, X
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	9c 93       	st	X, r25
     c80:	a4 89       	ldd	r26, Z+20	; 0x14
     c82:	b5 89       	ldd	r27, Z+21	; 0x15
     c84:	10 97       	sbiw	r26, 0x00	; 0
     c86:	19 f1       	breq	.+70     	; 0xcce <xTaskIncrementTick+0x14e>
     c88:	26 85       	ldd	r18, Z+14	; 0x0e
     c8a:	37 85       	ldd	r19, Z+15	; 0x0f
     c8c:	60 89       	ldd	r22, Z+16	; 0x10
     c8e:	71 89       	ldd	r23, Z+17	; 0x11
     c90:	e9 01       	movw	r28, r18
     c92:	7d 83       	std	Y+5, r23	; 0x05
     c94:	6c 83       	std	Y+4, r22	; 0x04
     c96:	20 89       	ldd	r18, Z+16	; 0x10
     c98:	31 89       	ldd	r19, Z+17	; 0x11
     c9a:	66 85       	ldd	r22, Z+14	; 0x0e
     c9c:	77 85       	ldd	r23, Z+15	; 0x0f
     c9e:	e9 01       	movw	r28, r18
     ca0:	7b 83       	std	Y+3, r23	; 0x03
     ca2:	6a 83       	std	Y+2, r22	; 0x02
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	6d 91       	ld	r22, X+
     ca8:	7c 91       	ld	r23, X
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	9f 01       	movw	r18, r30
     cae:	24 5f       	subi	r18, 0xF4	; 244
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	62 17       	cp	r22, r18
     cb4:	73 07       	cpc	r23, r19
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <xTaskIncrementTick+0x144>
     cb8:	20 89       	ldd	r18, Z+16	; 0x10
     cba:	31 89       	ldd	r19, Z+17	; 0x11
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	3c 93       	st	X, r19
     cc0:	2e 93       	st	-X, r18
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	15 8a       	std	Z+21, r1	; 0x15
     cc6:	14 8a       	std	Z+20, r1	; 0x14
     cc8:	9c 91       	ld	r25, X
     cca:	91 50       	subi	r25, 0x01	; 1
     ccc:	9c 93       	st	X, r25
     cce:	26 89       	ldd	r18, Z+22	; 0x16
     cd0:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <uxTopReadyPriority>
     cd4:	92 17       	cp	r25, r18
     cd6:	10 f4       	brcc	.+4      	; 0xcdc <xTaskIncrementTick+0x15c>
     cd8:	20 93 71 06 	sts	0x0671, r18	; 0x800671 <uxTopReadyPriority>
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	d9 01       	movw	r26, r18
     ce0:	aa 0f       	add	r26, r26
     ce2:	bb 1f       	adc	r27, r27
     ce4:	aa 0f       	add	r26, r26
     ce6:	bb 1f       	adc	r27, r27
     ce8:	aa 0f       	add	r26, r26
     cea:	bb 1f       	adc	r27, r27
     cec:	2a 0f       	add	r18, r26
     cee:	3b 1f       	adc	r19, r27
     cf0:	d9 01       	movw	r26, r18
     cf2:	a2 56       	subi	r26, 0x62	; 98
     cf4:	b9 4f       	sbci	r27, 0xF9	; 249
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	0d 90       	ld	r0, X+
     cfa:	bc 91       	ld	r27, X
     cfc:	a0 2d       	mov	r26, r0
     cfe:	b5 83       	std	Z+5, r27	; 0x05
     d00:	a4 83       	std	Z+4, r26	; 0x04
     d02:	14 96       	adiw	r26, 0x04	; 4
     d04:	2d 91       	ld	r18, X+
     d06:	3c 91       	ld	r19, X
     d08:	15 97       	sbiw	r26, 0x05	; 5
     d0a:	37 83       	std	Z+7, r19	; 0x07
     d0c:	26 83       	std	Z+6, r18	; 0x06
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	15 97       	sbiw	r26, 0x05	; 5
     d16:	e9 01       	movw	r28, r18
     d18:	5b 83       	std	Y+3, r21	; 0x03
     d1a:	4a 83       	std	Y+2, r20	; 0x02
     d1c:	15 96       	adiw	r26, 0x05	; 5
     d1e:	5c 93       	st	X, r21
     d20:	4e 93       	st	-X, r20
     d22:	14 97       	sbiw	r26, 0x04	; 4
     d24:	a6 89       	ldd	r26, Z+22	; 0x16
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	9d 01       	movw	r18, r26
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	22 0f       	add	r18, r18
     d34:	33 1f       	adc	r19, r19
     d36:	a2 0f       	add	r26, r18
     d38:	b3 1f       	adc	r27, r19
     d3a:	a2 56       	subi	r26, 0x62	; 98
     d3c:	b9 4f       	sbci	r27, 0xF9	; 249
     d3e:	b3 87       	std	Z+11, r27	; 0x0b
     d40:	a2 87       	std	Z+10, r26	; 0x0a
     d42:	9c 91       	ld	r25, X
     d44:	9f 5f       	subi	r25, 0xFF	; 255
     d46:	9c 93       	st	X, r25
     d48:	26 89       	ldd	r18, Z+22	; 0x16
     d4a:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     d4e:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     d52:	96 89       	ldd	r25, Z+22	; 0x16
     d54:	29 17       	cp	r18, r25
     d56:	08 f0       	brcs	.+2      	; 0xd5a <xTaskIncrementTick+0x1da>
     d58:	49 cf       	rjmp	.-366    	; 0xbec <xTaskIncrementTick+0x6c>
     d5a:	4b cf       	rjmp	.-362    	; 0xbf2 <xTaskIncrementTick+0x72>
     d5c:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     d60:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     d64:	26 89       	ldd	r18, Z+22	; 0x16
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	2e 0f       	add	r18, r30
     d78:	3f 1f       	adc	r19, r31
     d7a:	f9 01       	movw	r30, r18
     d7c:	e2 56       	subi	r30, 0x62	; 98
     d7e:	f9 4f       	sbci	r31, 0xF9	; 249
     d80:	90 81       	ld	r25, Z
     d82:	92 30       	cpi	r25, 0x02	; 2
     d84:	08 f0       	brcs	.+2      	; 0xd88 <xTaskIncrementTick+0x208>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 91 6d 06 	lds	r25, 0x066D	; 0x80066d <xYieldPending>
     d8c:	91 11       	cpse	r25, r1
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <xTaskIncrementTick+0x228>
     d90:	0c c0       	rjmp	.+24     	; 0xdaa <xTaskIncrementTick+0x22a>
     d92:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <xPendedTicks>
     d96:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <xPendedTicks+0x1>
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <xPendedTicks+0x1>
     da0:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <xPendedTicks>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <xTaskIncrementTick+0x22a>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <xTaskResumeAll>:
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	0f 92       	push	r0
     dbe:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxSchedulerSuspended>
     dc2:	81 50       	subi	r24, 0x01	; 1
     dc4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <uxSchedulerSuspended>
     dc8:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxSchedulerSuspended>
     dcc:	81 11       	cpse	r24, r1
     dce:	bf c0       	rjmp	.+382    	; 0xf4e <xTaskResumeAll+0x19a>
     dd0:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxCurrentNumberOfTasks>
     dd4:	81 11       	cpse	r24, r1
     dd6:	96 c0       	rjmp	.+300    	; 0xf04 <xTaskResumeAll+0x150>
     dd8:	bd c0       	rjmp	.+378    	; 0xf54 <xTaskResumeAll+0x1a0>
     dda:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <xPendingReadyList+0x5>
     dde:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <xPendingReadyList+0x6>
     de2:	06 80       	ldd	r0, Z+6	; 0x06
     de4:	f7 81       	ldd	r31, Z+7	; 0x07
     de6:	e0 2d       	mov	r30, r0
     de8:	a4 89       	ldd	r26, Z+20	; 0x14
     dea:	b5 89       	ldd	r27, Z+21	; 0x15
     dec:	c6 85       	ldd	r28, Z+14	; 0x0e
     dee:	d7 85       	ldd	r29, Z+15	; 0x0f
     df0:	80 89       	ldd	r24, Z+16	; 0x10
     df2:	91 89       	ldd	r25, Z+17	; 0x11
     df4:	9d 83       	std	Y+5, r25	; 0x05
     df6:	8c 83       	std	Y+4, r24	; 0x04
     df8:	c0 89       	ldd	r28, Z+16	; 0x10
     dfa:	d1 89       	ldd	r29, Z+17	; 0x11
     dfc:	86 85       	ldd	r24, Z+14	; 0x0e
     dfe:	97 85       	ldd	r25, Z+15	; 0x0f
     e00:	9b 83       	std	Y+3, r25	; 0x03
     e02:	8a 83       	std	Y+2, r24	; 0x02
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	2d 91       	ld	r18, X+
     e08:	3c 91       	ld	r19, X
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	cf 01       	movw	r24, r30
     e0e:	0c 96       	adiw	r24, 0x0c	; 12
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	31 f4       	brne	.+12     	; 0xe22 <xTaskResumeAll+0x6e>
     e16:	80 89       	ldd	r24, Z+16	; 0x10
     e18:	91 89       	ldd	r25, Z+17	; 0x11
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	9c 93       	st	X, r25
     e1e:	8e 93       	st	-X, r24
     e20:	11 97       	sbiw	r26, 0x01	; 1
     e22:	15 8a       	std	Z+21, r1	; 0x15
     e24:	14 8a       	std	Z+20, r1	; 0x14
     e26:	8c 91       	ld	r24, X
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	8c 93       	st	X, r24
     e2c:	a2 85       	ldd	r26, Z+10	; 0x0a
     e2e:	b3 85       	ldd	r27, Z+11	; 0x0b
     e30:	c4 81       	ldd	r28, Z+4	; 0x04
     e32:	d5 81       	ldd	r29, Z+5	; 0x05
     e34:	86 81       	ldd	r24, Z+6	; 0x06
     e36:	97 81       	ldd	r25, Z+7	; 0x07
     e38:	9d 83       	std	Y+5, r25	; 0x05
     e3a:	8c 83       	std	Y+4, r24	; 0x04
     e3c:	c6 81       	ldd	r28, Z+6	; 0x06
     e3e:	d7 81       	ldd	r29, Z+7	; 0x07
     e40:	84 81       	ldd	r24, Z+4	; 0x04
     e42:	95 81       	ldd	r25, Z+5	; 0x05
     e44:	9b 83       	std	Y+3, r25	; 0x03
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	9f 01       	movw	r18, r30
     e52:	2e 5f       	subi	r18, 0xFE	; 254
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	82 17       	cp	r24, r18
     e58:	93 07       	cpc	r25, r19
     e5a:	31 f4       	brne	.+12     	; 0xe68 <xTaskResumeAll+0xb4>
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	97 81       	ldd	r25, Z+7	; 0x07
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	9c 93       	st	X, r25
     e64:	8e 93       	st	-X, r24
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	13 86       	std	Z+11, r1	; 0x0b
     e6a:	12 86       	std	Z+10, r1	; 0x0a
     e6c:	8c 91       	ld	r24, X
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	8c 93       	st	X, r24
     e72:	86 89       	ldd	r24, Z+22	; 0x16
     e74:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <uxTopReadyPriority>
     e78:	98 17       	cp	r25, r24
     e7a:	10 f4       	brcc	.+4      	; 0xe80 <xTaskResumeAll+0xcc>
     e7c:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxTopReadyPriority>
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	dc 01       	movw	r26, r24
     e84:	aa 0f       	add	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	aa 0f       	add	r26, r26
     e8a:	bb 1f       	adc	r27, r27
     e8c:	aa 0f       	add	r26, r26
     e8e:	bb 1f       	adc	r27, r27
     e90:	8a 0f       	add	r24, r26
     e92:	9b 1f       	adc	r25, r27
     e94:	dc 01       	movw	r26, r24
     e96:	a2 56       	subi	r26, 0x62	; 98
     e98:	b9 4f       	sbci	r27, 0xF9	; 249
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	0d 90       	ld	r0, X+
     e9e:	bc 91       	ld	r27, X
     ea0:	a0 2d       	mov	r26, r0
     ea2:	b5 83       	std	Z+5, r27	; 0x05
     ea4:	a4 83       	std	Z+4, r26	; 0x04
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9c 91       	ld	r25, X
     eac:	15 97       	sbiw	r26, 0x05	; 5
     eae:	97 83       	std	Z+7, r25	; 0x07
     eb0:	86 83       	std	Z+6, r24	; 0x06
     eb2:	14 96       	adiw	r26, 0x04	; 4
     eb4:	cd 91       	ld	r28, X+
     eb6:	dc 91       	ld	r29, X
     eb8:	15 97       	sbiw	r26, 0x05	; 5
     eba:	3b 83       	std	Y+3, r19	; 0x03
     ebc:	2a 83       	std	Y+2, r18	; 0x02
     ebe:	15 96       	adiw	r26, 0x05	; 5
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	14 97       	sbiw	r26, 0x04	; 4
     ec6:	a6 89       	ldd	r26, Z+22	; 0x16
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	cd 01       	movw	r24, r26
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	a8 0f       	add	r26, r24
     eda:	b9 1f       	adc	r27, r25
     edc:	a2 56       	subi	r26, 0x62	; 98
     ede:	b9 4f       	sbci	r27, 0xF9	; 249
     ee0:	b3 87       	std	Z+11, r27	; 0x0b
     ee2:	a2 87       	std	Z+10, r26	; 0x0a
     ee4:	8c 91       	ld	r24, X
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	8c 93       	st	X, r24
     eea:	96 89       	ldd	r25, Z+22	; 0x16
     eec:	a0 91 c2 06 	lds	r26, 0x06C2	; 0x8006c2 <pxCurrentTCB>
     ef0:	b0 91 c3 06 	lds	r27, 0x06C3	; 0x8006c3 <pxCurrentTCB+0x1>
     ef4:	56 96       	adiw	r26, 0x16	; 22
     ef6:	8c 91       	ld	r24, X
     ef8:	98 17       	cp	r25, r24
     efa:	30 f0       	brcs	.+12     	; 0xf08 <xTaskResumeAll+0x154>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xYieldPending>
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <xTaskResumeAll+0x154>
     f04:	e0 e0       	ldi	r30, 0x00	; 0
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <xPendingReadyList>
     f0c:	81 11       	cpse	r24, r1
     f0e:	65 cf       	rjmp	.-310    	; 0xdda <xTaskResumeAll+0x26>
     f10:	ef 2b       	or	r30, r31
     f12:	11 f0       	breq	.+4      	; 0xf18 <xTaskResumeAll+0x164>
     f14:	0e 94 66 03 	call	0x6cc	; 0x6cc <prvResetNextTaskUnblockTime>
     f18:	c0 91 6e 06 	lds	r28, 0x066E	; 0x80066e <xPendedTicks>
     f1c:	d0 91 6f 06 	lds	r29, 0x066F	; 0x80066f <xPendedTicks+0x1>
     f20:	20 97       	sbiw	r28, 0x00	; 0
     f22:	69 f0       	breq	.+26     	; 0xf3e <xTaskResumeAll+0x18a>
     f24:	0e 94 c0 05 	call	0xb80	; 0xb80 <xTaskIncrementTick>
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <xTaskResumeAll+0x17e>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xYieldPending>
     f32:	21 97       	sbiw	r28, 0x01	; 1
     f34:	b9 f7       	brne	.-18     	; 0xf24 <xTaskResumeAll+0x170>
     f36:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <xPendedTicks+0x1>
     f3a:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <xPendedTicks>
     f3e:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xYieldPending>
     f42:	88 23       	and	r24, r24
     f44:	31 f0       	breq	.+12     	; 0xf52 <xTaskResumeAll+0x19e>
     f46:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <xTaskResumeAll+0x1a0>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <xTaskResumeAll+0x1a0>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <xTaskDelayUntil>:
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	8c 01       	movw	r16, r24
     f68:	eb 01       	movw	r28, r22
     f6a:	0e 94 b0 05 	call	0xb60	; 0xb60 <vTaskSuspendAll>
     f6e:	40 91 72 06 	lds	r20, 0x0672	; 0x800672 <xTickCount>
     f72:	50 91 73 06 	lds	r21, 0x0673	; 0x800673 <xTickCount+0x1>
     f76:	f8 01       	movw	r30, r16
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	c9 01       	movw	r24, r18
     f7e:	8c 0f       	add	r24, r28
     f80:	9d 1f       	adc	r25, r29
     f82:	42 17       	cp	r20, r18
     f84:	53 07       	cpc	r21, r19
     f86:	40 f4       	brcc	.+16     	; 0xf98 <xTaskDelayUntil+0x3a>
     f88:	82 17       	cp	r24, r18
     f8a:	93 07       	cpc	r25, r19
     f8c:	68 f4       	brcc	.+26     	; 0xfa8 <xTaskDelayUntil+0x4a>
     f8e:	48 17       	cp	r20, r24
     f90:	59 07       	cpc	r21, r25
     f92:	60 f0       	brcs	.+24     	; 0xfac <xTaskDelayUntil+0x4e>
     f94:	c0 e0       	ldi	r28, 0x00	; 0
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <xTaskDelayUntil+0x58>
     f98:	82 17       	cp	r24, r18
     f9a:	93 07       	cpc	r25, r19
     f9c:	48 f0       	brcs	.+18     	; 0xfb0 <xTaskDelayUntil+0x52>
     f9e:	48 17       	cp	r20, r24
     fa0:	59 07       	cpc	r21, r25
     fa2:	40 f0       	brcs	.+16     	; 0xfb4 <xTaskDelayUntil+0x56>
     fa4:	c0 e0       	ldi	r28, 0x00	; 0
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <xTaskDelayUntil+0x58>
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <xTaskDelayUntil+0x58>
     fac:	c1 e0       	ldi	r28, 0x01	; 1
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <xTaskDelayUntil+0x58>
     fb0:	c1 e0       	ldi	r28, 0x01	; 1
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <xTaskDelayUntil+0x58>
     fb4:	c1 e0       	ldi	r28, 0x01	; 1
     fb6:	f8 01       	movw	r30, r16
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	cc 23       	and	r28, r28
     fbe:	29 f0       	breq	.+10     	; 0xfca <xTaskDelayUntil+0x6c>
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	84 1b       	sub	r24, r20
     fc4:	95 0b       	sbc	r25, r21
     fc6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <prvAddCurrentTaskToDelayedList>
     fca:	0e 94 da 06 	call	0xdb4	; 0xdb4 <xTaskResumeAll>
     fce:	81 11       	cpse	r24, r1
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <xTaskDelayUntil+0x78>
     fd2:	0e 94 57 01 	call	0x2ae	; 0x2ae <vPortYield>
     fd6:	8c 2f       	mov	r24, r28
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     fe2:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxSchedulerSuspended>
     fe6:	88 23       	and	r24, r24
     fe8:	21 f0       	breq	.+8      	; 0xff2 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xYieldPending>
     ff0:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     ff2:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     ff6:	20 91 71 06 	lds	r18, 0x0671	; 0x800671 <uxTopReadyPriority>
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <vTaskSwitchContext+0x1c>
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	82 2f       	mov	r24, r18
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	e2 56       	subi	r30, 0x62	; 98
    1016:	f9 4f       	sbci	r31, 0xF9	; 249
    1018:	30 81       	ld	r19, Z
    101a:	33 23       	and	r19, r19
    101c:	79 f3       	breq	.-34     	; 0xffc <vTaskSwitchContext+0x1a>
    101e:	ac 01       	movw	r20, r24
    1020:	44 0f       	add	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	44 0f       	add	r20, r20
    1026:	55 1f       	adc	r21, r21
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	48 0f       	add	r20, r24
    102e:	59 1f       	adc	r21, r25
    1030:	df 01       	movw	r26, r30
    1032:	01 80       	ldd	r0, Z+1	; 0x01
    1034:	f2 81       	ldd	r31, Z+2	; 0x02
    1036:	e0 2d       	mov	r30, r0
    1038:	02 80       	ldd	r0, Z+2	; 0x02
    103a:	f3 81       	ldd	r31, Z+3	; 0x03
    103c:	e0 2d       	mov	r30, r0
    103e:	12 96       	adiw	r26, 0x02	; 2
    1040:	fc 93       	st	X, r31
    1042:	ee 93       	st	-X, r30
    1044:	11 97       	sbiw	r26, 0x01	; 1
    1046:	4f 55       	subi	r20, 0x5F	; 95
    1048:	59 4f       	sbci	r21, 0xF9	; 249
    104a:	e4 17       	cp	r30, r20
    104c:	f5 07       	cpc	r31, r21
    104e:	29 f4       	brne	.+10     	; 0x105a <vTaskSwitchContext+0x78>
    1050:	42 81       	ldd	r20, Z+2	; 0x02
    1052:	53 81       	ldd	r21, Z+3	; 0x03
    1054:	fd 01       	movw	r30, r26
    1056:	52 83       	std	Z+2, r21	; 0x02
    1058:	41 83       	std	Z+1, r20	; 0x01
    105a:	fc 01       	movw	r30, r24
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	8e 0f       	add	r24, r30
    106a:	9f 1f       	adc	r25, r31
    106c:	fc 01       	movw	r30, r24
    106e:	e2 56       	subi	r30, 0x62	; 98
    1070:	f9 4f       	sbci	r31, 0xF9	; 249
    1072:	01 80       	ldd	r0, Z+1	; 0x01
    1074:	f2 81       	ldd	r31, Z+2	; 0x02
    1076:	e0 2d       	mov	r30, r0
    1078:	86 81       	ldd	r24, Z+6	; 0x06
    107a:	97 81       	ldd	r25, Z+7	; 0x07
    107c:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <pxCurrentTCB+0x1>
    1080:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <pxCurrentTCB>
    1084:	20 93 71 06 	sts	0x0671, r18	; 0x800671 <uxTopReadyPriority>
    1088:	08 95       	ret

0000108a <Task1_Func>:
}



void Task1_Func(void *parameters)
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 d0       	rcall	.+0      	; 0x1090 <Task1_Func+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	TickType_t task1_xLastWakeTime;
	const TickType_t task1_xFrequency = 50;		/*50 ticks*/
	// Initialize the xLastWakeTime variable with the current time.
	task1_xLastWakeTime = xTaskGetTickCount();
    1094:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xTaskGetTickCount>
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		vTaskDelayUntil(&task1_xLastWakeTime, task1_xFrequency );
    109c:	62 e3       	ldi	r22, 0x32	; 50
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 af 07 	call	0xf5e	; 0xf5e <xTaskDelayUntil>
		PORTA ^= (0x01<<0);		/*toggle led Red*/
    10a8:	9b b3       	in	r25, 0x1b	; 27
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 27       	eor	r24, r25
    10ae:	8b bb       	out	0x1b, r24	; 27
    10b0:	f5 cf       	rjmp	.-22     	; 0x109c <Task1_Func+0x12>

000010b2 <Task2_Func>:
	}
}


void Task2_Func(void *parameters)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <Task2_Func+0x6>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	TickType_t task2_xLastWakeTime;
	const TickType_t task2_xFrequency = 100;	/*100 ticks*/
	// Initialize the xLastWakeTime variable with the current time.
	task2_xLastWakeTime = xTaskGetTickCount();
    10bc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xTaskGetTickCount>
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		vTaskDelayUntil(&task2_xLastWakeTime, task2_xFrequency );
    10c4:	64 e6       	ldi	r22, 0x64	; 100
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 af 07 	call	0xf5e	; 0xf5e <xTaskDelayUntil>
		PORTA ^= (0x01<<1);		/*toggle led Green*/
    10d0:	9b b3       	in	r25, 0x1b	; 27
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	89 27       	eor	r24, r25
    10d6:	8b bb       	out	0x1b, r24	; 27
    10d8:	f5 cf       	rjmp	.-22     	; 0x10c4 <Task2_Func+0x12>

000010da <Task3_Func>:
	}
}


void Task3_Func(void *parameters)
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <Task3_Func+0x6>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	TickType_t task3_xLastWakeTime;
	const TickType_t task3_xFrequency = 200;	/*200 ticks*/
	// Initialize the xLastWakeTime variable with the current time.
	task3_xLastWakeTime = xTaskGetTickCount();
    10e4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xTaskGetTickCount>
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		vTaskDelayUntil(&task3_xLastWakeTime, task3_xFrequency );
    10ec:	68 ec       	ldi	r22, 0xC8	; 200
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	0e 94 af 07 	call	0xf5e	; 0xf5e <xTaskDelayUntil>
		PORTA ^= (0x01<<2);		/*toggle led Yellow*/
    10f8:	9b b3       	in	r25, 0x1b	; 27
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	89 27       	eor	r24, r25
    10fe:	8b bb       	out	0x1b, r24	; 27
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <Task3_Func+0x12>

00001102 <main>:



int main(void)
{
    DDRA |= (0x07<<0); // configure pins 0,1,2 in PORTA as output pins for the LEDs
    1102:	8a b3       	in	r24, 0x1a	; 26
    1104:	87 60       	ori	r24, 0x07	; 7
    1106:	8a bb       	out	0x1a, r24	; 26
    PORTA &= ~(0x07<<0); // LEDs OFF
    1108:	8b b3       	in	r24, 0x1b	; 27
    110a:	88 7f       	andi	r24, 0xF8	; 248
    110c:	8b bb       	out	0x1b, r24	; 27
    
    xTaskCreate(Task1_Func,"first",configMINIMAL_STACK_SIZE,NULL,1,&task1ptr);
    110e:	0f 2e       	mov	r0, r31
    1110:	f8 ec       	ldi	r31, 0xC8	; 200
    1112:	ef 2e       	mov	r14, r31
    1114:	f6 e0       	ldi	r31, 0x06	; 6
    1116:	ff 2e       	mov	r15, r31
    1118:	f0 2d       	mov	r31, r0
    111a:	01 e0       	ldi	r16, 0x01	; 1
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	45 e5       	ldi	r20, 0x55	; 85
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	66 e6       	ldi	r22, 0x66	; 102
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	85 e4       	ldi	r24, 0x45	; 69
    112a:	98 e0       	ldi	r25, 0x08	; 8
    112c:	0e 94 30 05 	call	0xa60	; 0xa60 <xTaskCreate>
    xTaskCreate(Task2_Func,"second",configMINIMAL_STACK_SIZE,NULL,1,&task2ptr);
    1130:	0f 2e       	mov	r0, r31
    1132:	f6 ec       	ldi	r31, 0xC6	; 198
    1134:	ef 2e       	mov	r14, r31
    1136:	f6 e0       	ldi	r31, 0x06	; 6
    1138:	ff 2e       	mov	r15, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	45 e5       	ldi	r20, 0x55	; 85
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	6c e6       	ldi	r22, 0x6C	; 108
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	89 e5       	ldi	r24, 0x59	; 89
    114a:	98 e0       	ldi	r25, 0x08	; 8
    114c:	0e 94 30 05 	call	0xa60	; 0xa60 <xTaskCreate>
    xTaskCreate(Task3_Func,"third",configMINIMAL_STACK_SIZE,NULL,1,&task3ptr);
    1150:	0f 2e       	mov	r0, r31
    1152:	f4 ec       	ldi	r31, 0xC4	; 196
    1154:	ef 2e       	mov	r14, r31
    1156:	f6 e0       	ldi	r31, 0x06	; 6
    1158:	ff 2e       	mov	r15, r31
    115a:	f0 2d       	mov	r31, r0
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	45 e5       	ldi	r20, 0x55	; 85
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	63 e7       	ldi	r22, 0x73	; 115
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	8d e6       	ldi	r24, 0x6D	; 109
    116a:	98 e0       	ldi	r25, 0x08	; 8
    116c:	0e 94 30 05 	call	0xa60	; 0xa60 <xTaskCreate>

    vTaskStartScheduler();
    1170:	0e 94 84 05 	call	0xb08	; 0xb08 <vTaskStartScheduler>
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <main+0x72>

00001176 <_exit>:
    1176:	f8 94       	cli

00001178 <__stop_program>:
    1178:	ff cf       	rjmp	.-2      	; 0x1178 <__stop_program>
